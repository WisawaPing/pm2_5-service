{"version":3,"sources":["../../src/helpers/findAllByQuery.js"],"names":["req","db","arrKeyInclude","orderBy","result","include","query","length","where","forEach","key","findAll","order","status","newResult","filter","data","userId"],"mappings":";;;;;;;;;;;;;;;;;;;;;sFAAe,iBAAOA,GAAP,EAAYC,EAAZ;AAAA,QAAgBC,aAAhB,uEAAgC,EAAhC;AAAA,QAAoCC,OAApC,uEAA8C,MAA9C;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,kBADS;;AAGb;;AAEMC,mBALO,GAKGH,aALH;;AAAA,kBAOT,oBAAYF,IAAIM,KAAhB,EAAuBC,MAAvB,GAAgC,CAPvB;AAAA;AAAA;AAAA;;AAQLC,iBARK,GAQG,EARH;;AASX,gCAAYR,IAAIM,KAAhB,EAAuBG,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtC,kBAAIA,OAAO,QAAP,IAAmBA,OAAO,OAA9B,EAAuC;AACrC,oBAAIV,IAAIM,KAAJ,CAAUI,GAAV,KAAkB,EAAtB,EAA0B;AACxBF,wBAAME,GAAN,IAAaV,IAAIM,KAAJ,CAAUI,GAAV,CAAb;AACD;AACF;AACF,aAND;AAOA;AAhBW;AAAA,mBAiBIT,GAAGU,OAAH,CAAW;AACxB;AACAN,8BAFwB;AAGxBG,0BAHwB;AAIxBI,qBAAO,CACL,CAAC,WAAD,EAAcT,OAAd,CADK,EAEL,CAAC,IAAD,EAAOA,OAAP,CAFK;AAJiB,aAAX,CAjBJ;;AAAA;AAiBXC,kBAjBW;;AAAA,kBA0BPA,OAAOG,MAAP,GAAgB,CA1BT;AAAA;AAAA;AAAA;;AAAA,iBA2BLH,OAAO,CAAP,EAAUS,MA3BL;AAAA;AAAA;AAAA;;AA4BDC,qBA5BC,GA4BWV,OAAOW,MAAP,CAAc,UAACC,IAAD;AAAA,qBAAUA,KAAKH,MAAL,IAAe,YAAzB;AAAA,aAAd,CA5BX;;AAAA,iBA6BHb,IAAIM,KAAJ,CAAUW,MA7BP;AAAA;AAAA;AAAA;;AAAA,6CA8BEb,MA9BF;;AAAA;AAAA,6CAgCAU,SAhCA;;AAAA;AAAA,6CAkCFV,MAlCE;;AAAA;AAAA,6CAoCF,KApCE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAuCIH,GAAGU,OAAH,CAAW;AACxB;AACAN,8BAFwB;AAGxBO,qBAAO,CACL,CAAC,WAAD,EAAcT,OAAd,CADK,EAEL,CAAC,IAAD,EAAOA,OAAP,CAFK;AAHiB,aAAX,CAvCJ;;AAAA;AAuCXC,kBAvCW;;AAAA,kBAgDPA,OAAOG,MAAP,GAAgB,CAhDT;AAAA;AAAA;AAAA;;AAAA,iBAiDLH,OAAO,CAAP,EAAUS,MAjDL;AAAA;AAAA;AAAA;;AAkDDC,sBAlDC,GAkDWV,OAAOW,MAAP,CAAc,UAACC,IAAD;AAAA,qBAAUA,KAAKH,MAAL,IAAe,YAAzB;AAAA,aAAd,CAlDX;;AAAA,iBAmDHb,IAAIM,KAAJ,CAAUW,MAnDP;AAAA;AAAA;AAAA;;AAAA,6CAoDEb,MApDF;;AAAA;AAAA,6CAsDAU,UAtDA;;AAAA;AAAA,6CAyDFV,MAzDE;;AAAA;AAAA,6CA2DF,EA3DE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"findAllByQuery.js","sourcesContent":["export default async (req, db, arrKeyInclude = [], orderBy = \"DESC\") => {\n  let result;\n\n  // console.log(\"arrKeyInclude\", arrKeyInclude);\n\n  const include = arrKeyInclude;\n\n  if (Object.keys(req.query).length > 0) {\n    const where = {};\n    Object.keys(req.query).forEach((key) => {\n      if (key != \"offset\" && key != \"limit\") {\n        if (req.query[key] != \"\") {\n          where[key] = req.query[key];\n        }\n      }\n    });\n    // console.log(where);\n    result = await db.findAll({\n      // include: arrKeyInclude,\n      include,\n      where,\n      order: [\n        [\"createdAt\", orderBy],\n        [\"id\", orderBy],\n      ],\n    });\n    if (result.length > 0) {\n      if (result[0].status) {\n        const newResult = result.filter((data) => data.status != \"SAVE DRAFT\");\n        if (req.query.userId) {\n          return result;\n        }\n        return newResult;\n      }\n      return result;\n    } else {\n      return false;\n    }\n  } else {\n    result = await db.findAll({\n      // include: arrKeyInclude,\n      include,\n      order: [\n        [\"createdAt\", orderBy],\n        [\"id\", orderBy],\n      ],\n    });\n\n    if (result.length > 0) {\n      if (result[0].status) {\n        const newResult = result.filter((data) => data.status != \"SAVE DRAFT\");\n        if (req.query.userId) {\n          return result;\n        }\n        return newResult;\n      }\n\n      return result;\n    } else {\n      return [];\n    }\n  }\n};\n"]}