{"version":3,"sources":["../../src/controllers/award.controller.js"],"names":["require","Op","Award","db","FileAward","fileAward","include","create","req","res","body","status","send","response_status","message","data","err","pathPic","item","awardId","dataValues","id","updateIndex","items","index","update","where","result","console","log","findAll","query","awards","length","forEach","key","lang","searchGlobal","or","name_th","like","name_en","order","findOne","params","award","destroy","remove"],"mappings":"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","file":"award.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { Award } = db;\nconst FileAward = db.fileAward;\n\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await Award.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    if (data) {\n      for (let item of req.body.pathPic) {\n        item.awardId = data.dataValues.id;\n        await FileAward.create(item);\n      }\n      res.status(201).send({ response_status: \"SUCCESS\", data });\n    }\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await Award.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let awards = [];\n    if (Object.keys(req.query).length > 0) {\n      let where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n\n      if (query.searchGlobal) {\n        where = {};\n        where[Op.or] = [\n          {\n            name_th: {\n              [Op.like]: `%${query.searchGlobal}%`,\n            },\n          },\n          {\n            name_en: {\n              [Op.like]: `%${query.searchGlobal}%`,\n            },\n          },\n        ];\n      }\n\n      awards = await Award.findAll({\n        order: [\n          [\"index\", \"ASC\"],\n          [\"createdAt\", \"DESC\"],\n        ],\n        where,\n      });\n      if (awards) {\n        for (const item of awards) {\n          let result = await FileAward.findAll({\n            where: {\n              awardId: item.id,\n            },\n          });\n          item.dataValues.pathPic = result;\n        }\n      }\n    } else {\n      awards = await Award.findAll({\n        order: [\n          [\"index\", \"ASC\"],\n          [\"createdAt\", \"DESC\"],\n        ],\n      });\n      if (awards) {\n        for (const item of awards) {\n          let result = await FileAward.findAll({\n            where: {\n              awardId: item.id,\n            },\n          });\n          item.dataValues.pathPic = result;\n        }\n      }\n    }\n    res.send({ response_status: \"SUCCESS\", data: awards });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the awards.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    const award = await Award.findOne({\n      where: {\n        id,\n      },\n    });\n    if (award) {\n      const result = await FileAward.findAll({\n        where: {\n          awardId: id,\n        },\n      });\n      award.dataValues.pathPic = result;\n    }\n    res.send({ response_status: \"SUCCESS\", data: award.dataValues });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while retrieving the award.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await Award.update(req.body, {\n      where: {\n        id,\n      },\n    });\n    await FileAward.destroy({\n      where: {\n        awardId: id,\n      },\n    });\n    for (let item of req.body.pathPic) {\n      item.awardId = id;\n      await FileAward.create(item);\n    }\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n    res.send({ response_status: \"SUCCESS\", message: \"Updated successfully\" });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await Award.destroy({\n      where: {\n        id,\n      },\n    });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({ response_status: \"SUCCESS\", message: \"Deleted successfully\" });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}