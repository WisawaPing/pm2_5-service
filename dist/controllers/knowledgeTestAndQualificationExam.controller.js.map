{"version":3,"sources":["../../src/controllers/knowledgeTestAndQualificationExam.controller.js"],"names":["require","Op","KnowledgeTestAndQualificationExam","db","KnowledgeFile","include","create","req","res","body","status","send","response_status","message","data","filesAnnounces","knowledgeFile","knowledgeTestAndQualificationExamId","dataValues","id","err","findAll","query","knowledgeTestAndQualificationExams","length","where","forEach","key","lang","searchGlobal","or","title_th","like","title_en","knowledgeTestAndQualificationExam","findOne","params","update","result","console","log","destroy","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;eAEeA,QAAQ,WAAR,C;IAAPC,E,YAAAA,E;;IAEAC,iC,GAAqDC,gB,CAArDD,iC;IAAmCE,a,GAAkBD,gB,CAAlBC,a;;AAC3C,IAAMC,UAAU,EAAhB;;AAEA,IAAMC;AAAA,sFAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGND,IAAIE,IAHE;AAAA;AAAA;AAAA;;AAITD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJS;;AAAA;AAAA;AAAA,mBAWQX,kCAAkCI,MAAlC,CAAyCC,IAAIE,IAA7C,CAXR;;AAAA;AAWLK,gBAXK;;AAAA,iBAaPP,IAAIE,IAAJ,CAASM,cAbF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mDAciBR,IAAIE,IAAJ,CAASM,cAd1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAC,yBAdA;;AAePA,0BAAcC,mCAAd,GAAoDH,KAAKI,UAAL,CAAgBC,EAApE;;AAfO;AAAA,mBAiBDf,cAAcE,MAAd,CAAqBU,aAArB,CAjBC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,gBAqBNF,IArBM;AAAA;AAAA;AAAA;;AAsBTN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAASO,IAAIP,OAAJ,IAAe;AAFjB,aAAT;AAtBS;;AAAA;AA4BXL,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE;AAFmB,aAArB;AA5BW;AAAA;;AAAA;AAAA;AAAA;;AAiCXN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,YAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAjCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAwCA,IAAMQ;AAAA,uFAAU,kBAAOd,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAENc,iBAFM,GAEIf,GAFJ,CAENe,KAFM;AAGRC,8CAHQ,GAG6B,EAH7B;;AAAA,kBAIR,oBAAYhB,IAAIe,KAAhB,EAAuBE,MAAvB,GAAgC,CAJxB;AAAA;AAAA;AAAA;;AAKNC,iBALM,GAKE,EALF;;AAMV,gCAAYlB,IAAIe,KAAhB,EAAuBI,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtC,kBAAIA,QAAQ,MAAZ,EAAoB;AAClBC,uBAAOrB,IAAIe,KAAJ,CAAUK,GAAV,CAAP;AACA;AACD;AACDF,oBAAME,GAAN,IAAapB,IAAIe,KAAJ,CAAUK,GAAV,CAAb;AACD,aAND;;AAQA,gBAAIL,MAAMO,YAAV,EAAwB;AACtBJ,sBAAQ,EAAR;AACAA,oBAAMxB,GAAG6B,EAAT,IAAe,CACb;AACEC,4DACG9B,GAAG+B,IADN,QACiBV,MAAMO,YADvB;AADF,eADa,EAMb;AACEI,4DACGhC,GAAG+B,IADN,QACiBV,MAAMO,YADvB;AADF,eANa,CAAf;AAYD;;AA5BS;AAAA,mBA+BF3B,kCAAkCmB,OAAlC,CAA0C;AAC9C;AACA;AACA;AACAI;AAJ8C,aAA1C,CA/BE;;AAAA;AA8BVF,8CA9BU;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAuCFrB,kCAAkCmB,OAAlC,CAA0C;AAC9C;AACA;AACA;AAH8C,aAA1C,CAvCE;;AAAA;AAsCVE,8CAtCU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDA6CkCA,kCA7ClC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6CHW,6CA7CG;AAAA;AAAA,mBA+CF9B,cAAciB,OAAd,CAAsB;AAC1BI,qBAAO;AACLR,qDACEiB,kCAAkChB,UAAlC,CAA6CC;AAF1C;AADmB,aAAtB,CA/CE;;AAAA;AA8CVe,8CAAkChB,UAAlC,CAA6CH,cA9CnC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAuDZP,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPE,oBAAMS;AAFC,aAAT;AAvDY;AAAA;;AAAA;AAAA;AAAA;;AA4DZf,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBACE,aAAIA,OAAJ,IACA;AAJK,aAAT;;AA5DY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqEA,IAAMsB;AAAA,uFAAU,kBAAO5B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAENW,cAFM,GAEDZ,IAAI6B,MAAJ,CAAWjB,EAFV;AAAA;AAAA,mBAIJjB,kCAAkCiC,OAAlC,CAA0C;AAC9CV,qBAAO,EAAEN,MAAF;AADuC,aAA1C,CAJI;;AAAA;AAGNe,6CAHM;;AAOZ1B,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPE,oBAAMoB,kCAAkChB;AAFjC,aAAT;AAPY;AAAA;;AAAA;AAAA;AAAA;;AAYZV,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBACE,aAAIA,OAAJ,IACA;AAJK,aAAT;;AAZY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqBA,IAAMwB;AAAA,uFAAS,kBAAO9B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHW,cAFG,GAEIZ,IAAI6B,MAFR,CAEHjB,EAFG;AAAA;AAAA,mBAIUjB,kCAAkCmC,MAAlC,CAAyC9B,IAAIE,IAA7C,EAAmD;AACtEgB,qBAAO,EAAEN,MAAF;AAD+D,aAAnD,CAJV;;AAAA;AAILmB,kBAJK;;;AAQXC,oBAAQC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AARW,iBAUP/B,IAAIE,IAAJ,CAASM,cAVF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWHX,cAAcqC,OAAd,CAAsB;AAC1BhB,qBAAO;AACLR,qDAAqCE;AADhC;AADmB,aAAtB,CAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAiBiBZ,IAAIE,IAAJ,CAASM,cAjB1B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBAC,yBAjBA;;AAkBPA,0BAAcC,mCAAd,GAAoDE,EAApD;;AAlBO;AAAA,mBAoBDf,cAAcE,MAAd,CAAqBU,aAArB,CApBC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,kBAwBPsB,UAAU,CAxBH;AAAA;AAAA;AAAA;;AAyBT9B,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,iCAAiBM,EAAjB;AAFmB,aAArB;AAzBS;;AAAA;;AAgCXX,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAhCW;AAAA;;AAAA;AAAA;AAAA;;AAqCXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AArCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA4CA,IAAM6B;AAAA,uFAAS,kBAAOnC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHW,cAFG,GAEIZ,IAAI6B,MAFR,CAEHjB,EAFG;AAAA;AAAA,mBAGUjB,kCAAkCuC,OAAlC,CAA0C;AAC7DhB,qBAAO,EAAEN,MAAF;AADsD,aAA1C,CAHV;;AAAA;AAGLmB,kBAHK;;AAAA,kBAMPA,WAAW,CANJ;AAAA;AAAA;AAAA;;AAOT9B,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,qCAAqBM,EAArB;AAFmB,aAArB;AAPS;;AAAA;;AAcXX,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAdW;AAAA;;AAAA;AAAA;AAAA;;AAmBXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA0Be;AACbP,gBADa;AAEbe,kBAFa;AAGbc,kBAHa;AAIbE,gBAJa;AAKbK;AALa,C","file":"knowledgeTestAndQualificationExam.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { KnowledgeTestAndQualificationExam, KnowledgeFile } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await KnowledgeTestAndQualificationExam.create(req.body);\n\n    if (req.body.filesAnnounces) {\n      for (let knowledgeFile of req.body.filesAnnounces) {\n        knowledgeFile.knowledgeTestAndQualificationExamId = data.dataValues.id;\n\n        await KnowledgeFile.create(knowledgeFile);\n      }\n    }\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let knowledgeTestAndQualificationExams = [];\n    if (Object.keys(req.query).length > 0) {\n      let where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n\n      if (query.searchGlobal) {\n        where = {};\n        where[Op.or] = [\n          {\n            title_th: {\n              [Op.like]: `%${query.searchGlobal}%`,\n            },\n          },\n          {\n            title_en: {\n              [Op.like]: `%${query.searchGlobal}%`,\n            },\n          },\n        ];\n      }\n\n      knowledgeTestAndQualificationExams =\n        await KnowledgeTestAndQualificationExam.findAll({\n          // order: [\n          //   [ 'createdAt', 'DESC' ],\n          // ],\n          where,\n        });\n    } else {\n      knowledgeTestAndQualificationExams =\n        await KnowledgeTestAndQualificationExam.findAll({\n          // order+: [\n          //   [ 'createdAt', 'DESC' ],\n          // ]\n        });\n    }\n    for (let knowledgeTestAndQualificationExam of knowledgeTestAndQualificationExams) {\n      knowledgeTestAndQualificationExam.dataValues.filesAnnounces =\n        await KnowledgeFile.findAll({\n          where: {\n            knowledgeTestAndQualificationExamId:\n              knowledgeTestAndQualificationExam.dataValues.id,\n          },\n        });\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: knowledgeTestAndQualificationExams,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message ||\n        \"Some error occurred while retrieving the knowledgeTestAndQualificationExams.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    const knowledgeTestAndQualificationExam =\n      await KnowledgeTestAndQualificationExam.findOne({\n        where: { id },\n      });\n    res.send({\n      response_status: \"SUCCESS\",\n      data: knowledgeTestAndQualificationExam.dataValues,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message ||\n        \"Some error occurred while retrieving the knowledgeTestAndQualificationExam.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await KnowledgeTestAndQualificationExam.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (req.body.filesAnnounces) {\n      await KnowledgeFile.destroy({\n        where: {\n          knowledgeTestAndQualificationExamId: id,\n        },\n      });\n\n      for (let knowledgeFile of req.body.filesAnnounces) {\n        knowledgeFile.knowledgeTestAndQualificationExamId = id;\n\n        await KnowledgeFile.create(knowledgeFile);\n      }\n    }\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await KnowledgeTestAndQualificationExam.destroy({\n      where: { id },\n    });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}