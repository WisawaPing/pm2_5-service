{"version":3,"sources":["../../src/controllers/subjectTypeNew.controller.js"],"names":["SubjectTypeNew","db","SubjectNewSubjectTypeNew","include","create","req","res","body","status","send","response_status","message","data","err","findAll","subjectTypeNews","query","length","where","forEach","key","lang","subjectTypeNew","subjectTypeNewId","id","subjectNewSubjectTypeNew","dataValues","subjectNewSubjectTypeNews","findOne","params","update","result","console","log","remove","destroy"],"mappings":"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","file":"subjectTypeNew.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { SubjectTypeNew, SubjectNewSubjectTypeNew } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await SubjectTypeNew.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let subjectTypeNews = [];\n    if (Object.keys(req.query).length > 0) {\n      const where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n      subjectTypeNews = await SubjectTypeNew.findAll({\n        // order: [\n        //   [ 'createdAt', 'DESC' ],\n        // ],\n        where,\n        include: ['course']\n      });\n    } else {\n      subjectTypeNews = await SubjectTypeNew.findAll({\n        // order+: [\n        //   [ 'createdAt', 'DESC' ],\n        // ]\n        include: ['course']\n      });\n\n      // SubjectNewSubjectTypeNew\n      for (const subjectTypeNew of subjectTypeNews) {\n        let subjectNewSubjectTypeNew = await SubjectNewSubjectTypeNew.findAll({ where: { subjectTypeNewId: subjectTypeNew.id } });\n        subjectTypeNew.dataValues.subjectNewSubjectTypeNews = subjectNewSubjectTypeNew\n      }  \n    \n    }\n    res.send({\n      response_status: \"SUCCESS\",\n      data: subjectTypeNews,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the subjectTypeNews.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    const subjectTypeNew = await SubjectTypeNew.findOne({\n      where: { id },\n      include: ['course']\n    });\n    res.send({\n      response_status: \"SUCCESS\",\n      data: subjectTypeNew.dataValues,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the subjectTypeNew.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await SubjectTypeNew.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await SubjectTypeNew.destroy({ where: { id } });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}