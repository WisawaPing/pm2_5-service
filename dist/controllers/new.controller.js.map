{"version":3,"sources":["../../src/controllers/new.controller.js"],"names":["require","Op","New","db","NewsFile","NewsDocumentFile","include","create","req","res","body","status","send","response_status","message","data","documentFilesNews","documentFile","newId","dataValues","id","pathPic","err","updateIndex","items","item","index","update","where","result","console","log","findAll","query","offset","limit","page","Number","searchGlobal","or","title_th","like","title_en","order","resultRes","findOne","params","findByPk","destroy","remove"],"mappings":"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","file":"new.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { New, NewsFile, NewsDocumentFile } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await New.create(req.body);\n\n    if (req.body.documentFilesNews) {\n      for (let documentFile of req.body.documentFilesNews) {\n        documentFile.newId = data.dataValues.id;\n\n        await NewsDocumentFile.create(documentFile);\n      }\n    }\n\n    if (req.body.pathPic) {\n      for (let documentFile of req.body.pathPic) {\n        documentFile.newId = data.dataValues.id;\n\n        await NewsFile.create(documentFile);\n      }\n    }\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await New.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    let where = query ? query : {};\n\n    if (query.searchGlobal) {\n      where = {};\n      where[Op.or] = [\n        {\n          title_th: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n        {\n          title_en: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n      ];\n    }\n\n    const resultRes = await New.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"index\", \"ASC\"],\n        [\"createdAt\", \"DESC\"],\n      ],\n    });\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await New.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    data.dataValues.documentFilesNews = await NewsDocumentFile.findAll({\n      where: {\n        newId: data.dataValues.id,\n      },\n    });\n\n    data.dataValues.pathPic = await NewsFile.findAll({\n      where: {\n        newId: data.dataValues.id,\n      },\n    });\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await New.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (req.body.documentFilesNews) {\n      await NewsDocumentFile.destroy({\n        where: {\n          newId: id,\n        },\n      });\n\n      for (let documentFile of req.body.documentFilesNews) {\n        documentFile.newId = id;\n\n        await NewsDocumentFile.create(documentFile);\n      }\n    }\n\n    if (req.body.pathPic) {\n      await NewsFile.destroy({\n        where: {\n          newId: id,\n        },\n      });\n\n      for (let documentFile of req.body.pathPic) {\n        documentFile.newId = id;\n\n        await NewsFile.create(documentFile);\n      }\n    }\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await New.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}