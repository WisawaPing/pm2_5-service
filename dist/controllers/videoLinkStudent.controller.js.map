{"version":3,"sources":["../../src/controllers/videoLinkStudent.controller.js"],"names":["VideoLinkStudent","db","include","create","req","res","body","status","send","response_status","message","data","err","findAll","videoLinkStudents","query","length","where","forEach","key","lang","findOne","id","params","videoLinkStudent","dataValues","update","result","console","log","remove","destroy"],"mappings":"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","file":"videoLinkStudent.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { VideoLinkStudent } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await VideoLinkStudent.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let videoLinkStudents = [];\n    if (Object.keys(req.query).length > 0) {\n      const where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n      videoLinkStudents = await VideoLinkStudent.findAll({\n        // order: [\n        //   [ 'createdAt', 'DESC' ],\n        // ],\n        where,\n      });\n    } else {\n      videoLinkStudents = await VideoLinkStudent.findAll({\n        // order+: [\n        //   [ 'createdAt', 'DESC' ],\n        // ]\n      });\n\n    }\n    res.send({\n      response_status: \"SUCCESS\",\n      data: videoLinkStudents,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the videoLinkStudents.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    const videoLinkStudent = await VideoLinkStudent.findOne({\n      where: { id },\n    });\n    res.send({\n      response_status: \"SUCCESS\",\n      data: videoLinkStudent.dataValues,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the videoLinkStudent.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await VideoLinkStudent.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await VideoLinkStudent.destroy({ where: { id } });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}