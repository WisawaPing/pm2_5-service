{"version":3,"sources":["../../src/controllers/file.controller.js"],"names":["File","db","uploadFormData","req","res","sampleFile","uploadPath","body","type","userId","console","log","files","length","send","response_status","message","name","makeid","filename","mv","err","create","path","file","data","dataValues","result","characters","charactersLength","i","charAt","Math","floor","random","uploadBase64","user","base64File","split","pop","fileBitMap","Buffer","filePath","fs","writeFileSync","fileRes"],"mappings":"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","file":"file.controller.js","sourcesContent":["import fs from 'fs'\n// import fileType from 'file-type'\nimport db from '~/models'\n// import getRandomNumber from '~/utils/getRandomNumber'\n// import csv from 'csv-parser'\n\nconst File = db.File\n// const Op = db.Sequelize.Op\n// const Lottery = db.Lottery;\n\nconst uploadFormData = async (req, res) => {\n    let sampleFile\n    let uploadPath\n    // const { user } = req\n    const {type, userId} = req.body\n    console.log(type)\n\n    if (!req.files || Object.keys(req.files).length === 0) {\n        return res.send({response_status: 'ERROR', message: 'No files were uploaded.'})\n    }\n\n    sampleFile = req.files.files\n    const name = `${\n        makeid(5)\n    }-${\n        req.body.filename\n    }`\n    uploadPath = `public/upload-file/${name}`\n\n    await sampleFile.mv(uploadPath, async (err) => {\n        if (err) {\n            return res.send({\n                response_status: 'ERROR',\n                message: err.message || 'Some error occurred while retrieving the files.'\n            })\n        }\n        const file = await File.create({type, name, path: `https://gscm-service.yuzudigital.com/${uploadPath}`})\n        res.send({response_status: 'SUCCESS', data: file.dataValues, message: 'File was uploaded successfully'})\n\n    })\n}\n\nfunction makeid(length) {\n    var result = \"\";\n    var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n// const uploadFormData = async (req, res) => {\n//     let sampleFile\n//     let uploadPath\n//     // const { user } = req\n//     const body = req.body\n//     // // console.log(type)\n\n//     if (!req.uploadFile || Object.keys(req.uploadFile).length === 0) {\n//         return res.send({\n//             response_status: 'ERROR',\n//             message: 'No files were uploaded.',\n//         })\n//     }\n\n//     sampleFile = req.files.uploadFile\n//     const name = `${Math.floor(Math.random() * Math.floor(99999999))}.${sampleFile.mimetype.split('/')[1]}`\n//     uploadPath = `public/upload-file/${name}`\n\n//     await sampleFile.mv(uploadPath, async (err) => {\n//         if (err) {\n//             return res.send({\n//                 response_status: 'ERROR',\n//                 message: err.message || 'Some error occurred while retrieving the files.',\n//             })\n//         }\n//         const file = await File.create({\n//             type: 'upload-file',\n//             name,\n//             path: `https://gscm-service.yuzudigital.com/upload-file/${name}`,\n//         })\n//         res.send({\n//             response_status: 'SUCCESS',\n//             data: file.dataValues,\n//             message: 'File was uploaded successfully',\n//         })\n\n//     })\n// }\n\n// async function readCSV(name) {\n//     // try {\n//     let results = []\n//     fs.createReadStream('./public/csv/csv-' + name)\n//         .pipe(csv({\n//             headers: false,\n//         }))\n//         .on('data', (data) => {\n//             // console.log(data[\"2\"])\n//             // console.log(data)\n//             // if (data[\"2\"].trim() !== \"\" && data[\"2\"].trim() !== \"0\") {\n//             results.push(data)\n//                 // }\n//         })\n//         .on('end', () => {\n//             console.log(results);\n//             results.forEach(async resData => {\n//                 console.log(resData[\"_1\"]);\n//                 const lotData = {\n//                     \"lotteryNo\": resData[\"1\"],\n//                     \"time\": resData[\"2\"],\n//                     \"set\": resData[\"3\"],\n//                     \"lotteryDate\": resData[\"4\"],\n//                     \"stock\": resData[\"5\"],\n//                     \"owner\": resData[\"6\"],\n//                     \"urlImage\": `https://readylotservice.readylottery.com/lottery-images/${resData[\"7\"]}`,\n//                     \"price\": 80\n//                 }\n\n//                 await Lottery.create(lotData);\n//             });\n\n\n//         });\n\n//     return \"SUCCESS\";\n//     // } catch (err) {\n//     //     res.send({\n//     //         response_status: 'ERROR',\n//     //         message: err.message || 'Some error occurred while creating the Work Permit Form.',\n//     //     })\n//     // }\n// }\n\n// function convertData(val) {\n//     if (val == '-' || val == '' || val == ' ') {\n//         val = null;\n//     }\n\n//     return val;\n// }\n\nconst uploadBase64 = async (req, res) => {\n    let sampleFile\n    let uploadPath\n    const {user} = req\n    const {type, file, userId} = req.body\n\n    if (!file) {\n        return res.send({\n            response_status: 'ERROR',\n            message: err.message || 'No files were uploaded.'\n        })\n    }\n    let base64File = file.split(';base64,').pop()\n    const fileBitMap = new Buffer(base64File, 'base64')\n    // let mime = await fileType.fromBuffer(fileBitMap)\n    const name = `${\n        Math.floor(Math.random() * Math.floor(999))\n    }-${userId}.png`\n    const filePath = `public/upload-file/${name}`\n    fs.writeFileSync(filePath, fileBitMap)\n\n\n    // const file = await File.create({\n    //     type,\n    //     name,\n    //     path: `https://gscm-service.yuzudigital.com/${uploadPath}`,\n    // })\n    const fileRes = await File.create({\n            type, name, path: `https://gscm-service.yuzudigital.com/${\n            filePath\n            // filePath.replace('public/', '')\n        }`\n    })\n    res.send({response_status: 'SUCCESS', data: fileRes.dataValues, message: 'File was uploaded successfully'})\n}\n\n// const findAll = async (req, res) => {\n// try {\n//     let files = []\n//     if (Object.keys(req.query).length > 0) {\n//       const where = {}\n//       Object.keys(req.query).forEach(key => {\n//         if (key === 'lang') {\n//           lang = req.query[key]\n//           return\n//         }\n//         where[key] = req.query[key]\n//       })\n//       files = await File.findAll({\n//         order: [\n//           [ 'createdAt', 'DESC' ],\n//         ],\n//         where,\n//       })\n//     }\n//     else {\n//       files = await File.findAll({\n//         order: [\n//           [ 'createdAt', 'DESC' ],\n//         ]\n//       })\n//     }\n//     res.send({\n//       response_status: 'SUCCESS',\n//       data: files,\n//     })\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while retrieving the files.',\n//     })\n// }\n// }\n\n// const findAllList = async (req, res) => {\n// try {\n//     let files = []\n//     files = await File.findAll({\n//       where: {\n//         isCustom: false,\n//       },\n//       order: [\n//         [ 'createdAt', 'DESC' ],\n//       ]\n//     })\n//     res.send({\n//       response_status: 'SUCCESS',\n//       data: files,\n//     })\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while retrieving the files.',\n//     })\n// }\n// }\n\n// const findOne = async (req, res) => {\n// try {\n//     const id = req.params.id\n//     const file = await File.findOne({ where: { id }})\n//     res.send({\n//       response_status: 'ERROR',\n//       data: file.dataValues,\n//     })\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while retrieving the file.',\n//     })\n// }\n// }\n\n// const update = async (req, res) => {\n// try {\n//     const id = req.params.id\n//     const file = await File.update(req.body, { where: { id }})\n//     if (file == 1) {\n//       res.send({\n//         response_status: 'SUCCESS',\n//         message: 'File was updated successfully',\n//       })\n//     }\n//     else {\n//       res.send({\n//         response_status: 'ERROR',\n//         message: `File (ID: ${id}) was not found.`,\n//       })\n//     }\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while updating the file.',\n//     })\n// }\n// }\n\n// const approve = async (req, res) => {\n// try {\n//     const id = req.params.id\n//     const file = await File.update({ activeFlag: true }, { where: { id }})\n//     if (file == 1) {\n//       res.send({\n//         response_status: 'SUCCESS',\n//         message: 'File was approved successfully',\n//       })\n//     }\n//     else {\n//       res.send({\n//         response_status: 'ERROR',\n//         message: `File (ID: ${id}) was not found.`,\n//       })\n//     }\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while updating the file.',\n//     })\n// }\n// }\n\n// const remove = async (req, res) => {\n// try {\n//     const id = req.params.id\n//     const file = await File.destroy({ where: { id }})\n//     if (file == 1) {\n//       res.send({\n//         response_status: 'SUCCESS',\n//         message: 'File was deleted successfully',\n//       })\n//     }\n//     else {\n//       res.send({\n//         response_status: 'ERROR',\n//         message: `Log (ID: ${id}) was not found.`,\n//       })\n//     }\n// }\n// catch (err) {\n//     res.send({\n//       response_status: 'ERROR',\n//       message: err.message || 'Some error occurred while deleting the file.',\n//     })\n// }\n// }\n\nexport default {\n    uploadFormData, uploadBase64,\n    // findAll,\n    // findAllList,\n    // update,\n    // findOne,\n    // remove,\n    // approve,\n}\n"]}