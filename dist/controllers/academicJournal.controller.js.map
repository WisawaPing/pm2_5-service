{"version":3,"sources":["../../src/controllers/academicJournal.controller.js"],"names":["require","Op","AcademicJournal","db","DocumentAcademicJournal","include","create","req","res","body","status","send","response_status","message","data","documentAcademicJournals","documentScholarship","academicJournalId","id","findAll","where","ann","dataValues","err","updateIndex","items","item","index","update","result","console","log","query","offset","limit","page","name_th","Number","like","searchGlobal","or","name_en","order","resultRes","findOne","params","findByPk","destroy","documentAcademicJournal","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;eACeA,QAAQ,WAAR,C;IAAPC,E,YAAAA,E;;IAEAC,e,GAA6CC,gB,CAA7CD,e;IAAiBE,uB,GAA4BD,gB,CAA5BC,uB;;AACzB,IAAMC,UAAU,EAAhB;;AAEA,IAAMC;AAAA,sFAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGND,IAAIE,IAHE;AAAA;AAAA;AAAA;;AAITD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJS;;AAAA;AAAA;AAAA,mBAWQX,gBAAgBI,MAAhB,CAAuBC,IAAIE,IAA3B,CAXR;;AAAA;AAWLK,gBAXK;AAAA;AAAA;AAAA;AAAA;AAAA,mDAaqBP,IAAIE,IAAJ,CAASM,wBAb9B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaFC,+BAbE;;AAcTA,gCAAoBC,iBAApB,GAAwCH,KAAKI,EAA7C;AAdS;AAAA,mBAeHd,wBAAwBE,MAAxB,CAA+BU,mBAA/B,CAfG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAkBKZ,wBAAwBe,OAAxB,CAAgC;AAC9CC,qBAAO,EAAEH,mBAAmBH,KAAKI,EAA1B;AADuC,aAAhC,CAlBL;;AAAA;AAkBPG,eAlBO;;AAqBXP,iBAAKQ,UAAL,CAAgBP,wBAAhB,GAA2C,EAA3C;AACAD,iBAAKQ,UAAL,CAAgBP,wBAAhB,GAA2CM,GAA3C;;AAtBW,gBAwBNP,IAxBM;AAAA;AAAA;AAAA;;AAyBTN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAASU,IAAIV,OAAJ,IAAe;AAFjB,aAAT;AAzBS;;AAAA;AA+BXL,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE;AAFmB,aAArB;AA/BW;AAAA;;AAAA;AAAA;AAAA;;AAoCXN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,YAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2CA,IAAMW;AAAA,uFAAc,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEViB,iBAFU,GAEFlB,IAAIE,IAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oDAIGgB,KAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAILC,gBAJK;AAKNR,cALM,GAKQQ,IALR,CAKNR,EALM,EAKFS,KALE,GAKQD,IALR,CAKFC,KALE;AAAA;AAAA,mBAOOzB,gBAAgB0B,MAAhB,CACnB,EAAED,YAAF,EADmB,EAEnB;AACEP,qBAAO,EAAEF,MAAF;AADT,aAFmB,CAPP;;AAAA;AAORW,kBAPQ;;;AAcdC,oBAAQC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AAdc,kBAgBVA,OAAO,CAAP,MAAc,CAhBJ;AAAA;AAAA;AAAA;;AAiBZrB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,iCAAiBK,EAAjB;AAFmB,aAArB;AAjBY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAyBhBV,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAzBgB;AAAA;;AAAA;AAAA;AAAA;;AA8BhBL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AA9BgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqCA,IAAMM;AAAA,uFAAU,kBAAOZ,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAENwB,iBAFM,GAEIzB,GAFJ,CAENyB,KAFM;AAGNC,kBAHM,GAG2BD,KAH3B,CAGNC,MAHM,EAGEC,KAHF,GAG2BF,KAH3B,CAGEE,KAHF,EAGSC,IAHT,GAG2BH,KAH3B,CAGSG,IAHT,EAGeC,OAHf,GAG2BJ,KAH3B,CAGeI,OAHf;;AAIZ,gBAAIH,UAAUC,KAAV,IAAmBC,IAAvB,EAA6B;AAC3B,qBAAOH,MAAMC,MAAb;AACA,qBAAOD,MAAME,KAAb;AACA,qBAAOF,MAAMG,IAAb;AACAF,uBAASA,SAASI,OAAOJ,MAAP,CAAT,GAA0B,IAAnC;AACAC,sBAAQA,QAAQG,OAAOH,KAAP,CAAR,GAAwB,IAAhC;AACA,kBAAIC,IAAJ,EAAU;AACRF,yBAASE,OAAOE,OAAOF,IAAP,CAAP,GAAsB,IAA/B;AACD;AACF;;AAEGf,iBAfQ,GAeAY,QAAQA,KAAR,GAAgB,EAfhB;;;AAiBZ,gBAAIA,MAAMI,OAAV,EAAmB;AACjBJ,oBAAMI,OAAN,qCACGnC,GAAGqC,IADN,QACiBF,OADjB;AAGD;;AAED,gBAAIJ,MAAMO,YAAV,EAAwB;AACtBnB,sBAAQ,EAAR;AACAA,oBAAMnB,GAAGuC,EAAT,IAAe,CACb;AACEJ,2DACGnC,GAAGqC,IADN,QACiBN,MAAMO,YADvB;AADF,eADa,EAMb;AACEE,2DACGxC,GAAGqC,IADN,QACiBN,MAAMO,YADvB;AADF,eANa,CAAf;AAYD;AACD;;AAtCY;AAAA,mBAwCYrC,gBAAgBiB,OAAhB,CAAwB;AAC9Ce,0BAD8C;AAE9CD,4BAF8C;AAG9Cb,0BAH8C;AAI9Cf,8BAJ8C;AAK9CqC,qBAAO,CACL,CAAC,OAAD,EAAU,KAAV,CADK,EAEL,CAAC,WAAD,EAAc,MAAd,CAFK;AALuC,aAAxB,CAxCZ;;AAAA;AAwCNC,qBAxCM;;;AAmDZb,oBAAQC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACA;AACA;;AArDY,gBAuDPW,SAvDO;AAAA;AAAA;AAAA;;AAwDVnC,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAASU,IAAIV,OAAJ,IAAe;AAFL,aAArB;AAxDU;;AAAA;AA8DZL,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE,oBAAM6B;AAFa,aAArB;AA9DY;AAAA;;AAAA;AAAA;AAAA;;AAmEZnC,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAnEY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA0EA,IAAM+B;AAAA,uFAAU,kBAAOrC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJU,cAFI,GAEGX,IAAIsC,MAFP,CAEJ3B,EAFI;AAAA;AAAA,mBAGKhB,gBAAgB4C,QAAhB,CAAyB5B,EAAzB,EAA6B,EAAEb,gBAAF,EAA7B,CAHL;;AAAA;AAGRS,gBAHQ;AAAA;AAAA,mBAMIV,wBAAwBe,OAAxB,CAAgC;AAC9CC,qBAAO,EAAEH,mBAAmBC,EAArB;AADuC,aAAhC,CANJ;;AAAA;AAMRG,eANQ;;AASZP,iBAAKQ,UAAL,CAAgBP,wBAAhB,GAA2C,EAA3C;AACAD,iBAAKQ,UAAL,CAAgBP,wBAAhB,GAA2CM,GAA3C;;AAVY,gBAYPP,IAZO;AAAA;AAAA;AAAA;;AAaVN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS;AAFF,aAAT;AAbU;;AAAA;;AAoBZL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPE,oBAAMA;AAFC,aAAT;AApBY;AAAA;;AAAA;AAAA;AAAA;;AAyBZN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAzBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgCA,IAAMe;AAAA,uFAAS,kBAAOrB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHU,cAFG,GAEIX,IAAIsC,MAFR,CAEH3B,EAFG;AAAA;AAAA,mBAIUhB,gBAAgB0B,MAAhB,CAAuBrB,IAAIE,IAA3B,EAAiC;AACpDW,qBAAO,EAAEF,MAAF;AAD6C,aAAjC,CAJV;;AAAA;AAILW,kBAJK;;;AAQXC,oBAAQC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AARW,kBAUPA,UAAU,CAVH;AAAA;AAAA;AAAA;;AAWTrB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,iCAAiBK,EAAjB;AAFmB,aAArB;AAXS;;AAAA;AAAA;AAAA,mBAkBLd,wBAAwB2C,OAAxB,CAAgC,EAAE3B,OAAO,EAAEH,mBAAmBC,EAArB,EAAT,EAAhC,CAlBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAmByBX,IAAIE,IAAJ,CAASM,wBAnBlC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBFiC,mCAnBE;;AAoBTA,oCAAwB/B,iBAAxB,GAA4CC,EAA5C;AApBS;AAAA,mBAqBHd,wBAAwBE,MAAxB,CAA+B0C,uBAA/B,CArBG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAwBXxC,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAxBW;AAAA;;AAAA;AAAA;AAAA;;AA6BXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AA7BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAoCA,IAAMoC;AAAA,uFAAS,kBAAO1C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHU,cAFG,GAEIX,IAAIsC,MAFR,CAEH3B,EAFG;AAAA;AAAA,mBAGUhB,gBAAgB6C,OAAhB,CAAwB;AAC3C3B,qBAAO,EAAEF,MAAF;AADoC,aAAxB,CAHV;;AAAA;AAGLW,kBAHK;;AAAA,kBAOPA,WAAW,CAPJ;AAAA;AAAA;AAAA;;AAQTrB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,qCAAqBK,EAArB;AAFmB,aAArB;AARS;;AAAA;;AAeXV,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAfW;AAAA;;AAAA;AAAA;AAAA;;AAoBXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA2Be;AACbP,gBADa;AAEba,kBAFa;AAGbK,0BAHa;AAIboB,kBAJa;AAKbhB,gBALa;AAMbqB;AANa,C","file":"academicJournal.controller.js","sourcesContent":["import db from \"~/models\";\nconst { Op } = require(\"sequelize\");\n\nconst { AcademicJournal, DocumentAcademicJournal } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await AcademicJournal.create(req.body);\n\n    for (let documentScholarship of req.body.documentAcademicJournals) {\n      documentScholarship.academicJournalId = data.id;\n      await DocumentAcademicJournal.create(documentScholarship);\n    }\n\n    let ann = await DocumentAcademicJournal.findAll({\n      where: { academicJournalId: data.id },\n    });\n    data.dataValues.documentAcademicJournals = [];\n    data.dataValues.documentAcademicJournals = ann;\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await AcademicJournal.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page, name_th } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n\n    let where = query ? query : {};\n\n    if (query.name_th) {\n      query.name_th = {\n        [Op.like]: `%${name_th}%`,\n      };\n    }\n\n    if (query.searchGlobal) {\n      where = {};\n      where[Op.or] = [\n        {\n          name_th: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n        {\n          name_en: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n      ];\n    }\n    // delete query.name_th_like\n\n    const resultRes = await AcademicJournal.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"index\", \"ASC\"],\n        [\"createdAt\", \"DESC\"],\n      ],\n    });\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    let data = await AcademicJournal.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    let ann = await DocumentAcademicJournal.findAll({\n      where: { academicJournalId: id },\n    });\n    data.dataValues.documentAcademicJournals = [];\n    data.dataValues.documentAcademicJournals = ann;\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await AcademicJournal.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    await DocumentAcademicJournal.destroy({ where: { academicJournalId: id } });\n    for (let documentAcademicJournal of req.body.documentAcademicJournals) {\n      documentAcademicJournal.academicJournalId = id;\n      await DocumentAcademicJournal.create(documentAcademicJournal);\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await AcademicJournal.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}