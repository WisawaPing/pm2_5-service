{"version":3,"sources":["../../src/controllers/major.controller copy.js"],"names":["Major","db","TypeCourse","SubjectMajor","SubjectTypeCourse","Course","include","create","req","res","body","status","send","response_status","message","data","err","findAll","query","offset","limit","page","Number","where","order","resultRes","console","log","findOne","id","params","findByPk","update","result","remove","destroy","form3","majors","typeCourse","courseId","iterator","subject","majorData","iteratorSubject","majorId","dataValues","typeCourseData","typeCourseId","getCourseIdForm3","courseRes","majorRes","typeCourseRes","payload","course","updateCourseIdForm3","deleteCourseIdForm3","subject_majors","subject_type_courses"],"mappings":"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","file":"major.controller copy.js","sourcesContent":["import db from \"~/models\";\n\nconst { Major, TypeCourse, SubjectMajor, SubjectTypeCourse, Course } = db;\nconst include = [\"level\", \"facualty\"];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await Major.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    const where = query ? query : {};\n    const resultRes = await Major.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"createdAt\", \"DESC\"],\n        [\"id\", \"DESC\"],\n      ],\n    });\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await Major.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await Major.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await Major.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nconst form3 = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { majors, typeCourse, courseId } = req.body;\n\n    // majors for\n    for (const iterator of majors) {\n      const { subject } = iterator;\n\n      const majorData = await Major.create({\n        ...iterator,\n        courseId,\n      });\n      for (const iteratorSubject of subject) {\n        await SubjectMajor.create({\n          ...iteratorSubject,\n          majorId: majorData.dataValues.id,\n        });\n      }\n    }\n\n    // typeCourse for loop\n    for (const iterator of typeCourse) {\n      const { subject } = iterator;\n\n      const typeCourseData = await TypeCourse.create({\n        ...iterator,\n        courseId,\n      });\n\n      for (const iteratorSubject of subject) {\n        await SubjectTypeCourse.create({\n          ...iteratorSubject,\n          typeCourseId: typeCourseData.dataValues.id,\n        });\n      }\n    }\n\n    // const data = await Major.create(req.body);\n    // if (!data) {\n    //   res.send({\n    //     response_status: \"ERROR\",\n    //     message: err.message || \"Some error occurred while creating.\",\n    //   });\n    //   return;\n    // }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      // data,\n      // resultMajor: resultMajor[0].id,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst getCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n    const courseRes = await Course.findByPk(courseId);\n    const majorRes = await Major.findAll({\n      include: SubjectMajor,\n      where: { courseId },\n    });\n    const typeCourseRes = await TypeCourse.findAll({\n      where: { courseId },\n      include: SubjectTypeCourse,\n    });\n\n    // console.log(\"courseRes\", courseRes);\n\n    if (!courseRes) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    const payload = {\n      courseId,\n      course: {\n        ...courseRes.dataValues,\n      },\n      majors: majorRes,\n      typeCourse: typeCourseRes,\n    };\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: payload,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst updateCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { majors, typeCourse } = req.body;\n\n    const courseRes = await Course.findByPk(courseId);\n\n    if (!courseRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(courseId: ${courseId}) was not found.`,\n      });\n      return;\n    }\n\n    // majors for\n    for (const iterator of majors) {\n      const { subject, id } = iterator;\n\n      const majorData = await Major.update(\n        {\n          ...iterator,\n        },\n        {\n          where: { id },\n        }\n      );\n      for (const iteratorSubject of subject) {\n        const { id } = iteratorSubject;\n        await SubjectMajor.update(\n          {\n            ...iteratorSubject,\n          },\n          {\n            where: { id },\n          }\n        );\n      }\n    }\n\n    // // typeCourse for loop\n    for (const iterator of typeCourse) {\n      const { subject, id } = iterator;\n\n      const typeCourseData = await TypeCourse.update(\n        {\n          ...iterator,\n        },\n        {\n          where: { id },\n        }\n      );\n\n      for (const iteratorSubject of subject) {\n        const { id } = iteratorSubject;\n        await SubjectTypeCourse.update(\n          {\n            ...iteratorSubject,\n          },\n          {\n            where: { id },\n          }\n        );\n      }\n    }\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n\n    // console.log(\"courseRes\", courseRes);\n    // res.send(courseRes);\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst deleteCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const courseRes = await Course.findByPk(courseId);\n\n    if (!courseRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (CourseId: ${courseId}) was not found.`,\n      });\n      return;\n    }\n\n    const majorRes = await Major.findAll({\n      include: SubjectMajor,\n      where: { courseId },\n    });\n    const typeCourseRes = await TypeCourse.findAll({\n      where: { courseId },\n      include: SubjectTypeCourse,\n    });\n\n    for (const iterator of majorRes) {\n      const { id, subject_majors } = iterator;\n      await Major.destroy({\n        where: { id },\n      });\n      for (const iteratorSubject of subject_majors) {\n        const { id } = iteratorSubject;\n        await SubjectMajor.destroy({\n          where: { id },\n        });\n      }\n    }\n\n    for (const iterator of typeCourseRes) {\n      const { id, subject_type_courses } = iterator;\n      await Major.destroy({\n        where: { id },\n      });\n      for (const iteratorSubject of subject_type_courses) {\n        const { id } = iteratorSubject;\n        await SubjectMajor.destroy({\n          where: { id },\n        });\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n  form3,\n  getCourseIdForm3,\n  updateCourseIdForm3,\n  deleteCourseIdForm3,\n};\n"]}