{"version":3,"sources":["../../src/controllers/scholarship.controller.js"],"names":["require","Op","Scholarship","db","DocumentScholarship","include","create","req","res","body","status","send","response_status","message","data","err","documentScholarships","documentScholarship","scholarshipId","id","findAll","where","ann","dataValues","updateIndex","items","item","index","update","result","console","log","query","offset","limit","page","Number","searchGlobal","or","title_th","like","title_en","order","resultRes","findOne","params","findByPk","destroy","remove"],"mappings":"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","file":"scholarship.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { Scholarship, DocumentScholarship } = db;\nconst include = [\"level\"];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    let data = await Scholarship.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n\n    for (let documentScholarship of req.body.documentScholarships) {\n      documentScholarship.scholarshipId = data.id;\n      await DocumentScholarship.create(documentScholarship);\n    }\n\n    let ann = await DocumentScholarship.findAll({\n      where: { scholarshipId: data.id },\n    });\n    data.dataValues.documentScholarships = [];\n    data.dataValues.documentScholarships = ann;\n\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await Scholarship.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    let where = query ? query : {};\n\n    if (query.searchGlobal) {\n      where = {};\n      where[Op.or] = [\n        {\n          title_th: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n        {\n          title_en: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n      ];\n    }\n\n    const resultRes = await Scholarship.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"index\", \"ASC\"],\n        [\"createdAt\", \"DESC\"],\n      ],\n    });\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    let data = await Scholarship.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    let ann = await DocumentScholarship.findAll({\n      where: { scholarshipId: id },\n    });\n    data.dataValues.documentScholarships = [];\n    data.dataValues.documentScholarships = ann;\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await Scholarship.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    await DocumentScholarship.destroy({ where: { scholarshipId: id } });\n    for (let documentScholarship of req.body.documentScholarships) {\n      documentScholarship.scholarshipId = id;\n      await DocumentScholarship.create(documentScholarship);\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await Scholarship.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}