{"version":3,"sources":["../../src/controllers/studyFee.controller.js"],"names":["StudyFee","db","include","create","req","res","body","status","send","response_status","message","data","err","findAll","studyFees","query","length","where","forEach","key","lang","findOne","id","params","studyFee","dataValues","update","result","console","log","remove","destroy"],"mappings":"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","file":"studyFee.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { StudyFee } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await StudyFee.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let studyFees = [];\n    if (Object.keys(req.query).length > 0) {\n      const where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n      studyFees = await StudyFee.findAll({\n        // order: [\n        //   [ 'createdAt', 'DESC' ],\n        // ],\n        where,\n        include: ['course']\n      });\n    } else {\n      studyFees = await StudyFee.findAll({\n        // order+: [\n        //   [ 'createdAt', 'DESC' ],\n        // ]\n        include: ['course']\n      });\n\n    }\n    res.send({\n      response_status: \"SUCCESS\",\n      data: studyFees,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the studyFees.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    const studyFee = await StudyFee.findOne({\n      where: { id },\n      include: ['course']\n    });\n    res.send({\n      response_status: \"SUCCESS\",\n      data: studyFee.dataValues,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the studyFee.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await StudyFee.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await StudyFee.destroy({ where: { id } });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}