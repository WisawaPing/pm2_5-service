{"version":3,"sources":["../../src/controllers/major.controller.js"],"names":["Major","db","TypeCourse","Coursesoffered","SubjectTypeCourse","Course","SubCoursesOffered","include","create","req","res","body","status","send","response_status","message","data","err","findAll","query","offset","limit","page","Number","where","order","resultRes","console","log","findOne","id","params","findByPk","update","result","remove","destroy","form3","majors","typeCourse","courseId","iterator","subject","courses_offered_arr","majorData","typeCourseData","getCourseIdForm3","courseRes","majorRes","typeCourseRes","newMajorRes","newTypeCourseRes","arrCourses_offereds","JSON","parse","courses_offereds","item","coursesofferedRes","push","payload","dataValues","course","updateCourseIdForm3","deleteCourseIdForm3"],"mappings":"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","file":"major.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst {\n  Major,\n  TypeCourse,\n  Coursesoffered,\n  SubjectTypeCourse,\n  Course,\n  SubCoursesOffered,\n} = db;\nconst include = [\"level\", \"facualty\"];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await Major.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    const where = query ? query : {};\n    const resultRes = await Major.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"createdAt\", \"DESC\"],\n        [\"id\", \"DESC\"],\n      ],\n    });\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await Major.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await Major.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await Major.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nconst form3 = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { majors, typeCourse, courseId } = req.body;\n\n    // // // majors for\n    for (const iterator of majors) {\n      const { subject } = iterator;\n\n      const majorData = await Major.create({\n        ...iterator,\n        courseId,\n        courses_offered_arr: subject,\n      });\n    }\n\n    // // // typeCourse for loop\n    for (const iterator of typeCourse) {\n      const { subject } = iterator;\n\n      const typeCourseData = await TypeCourse.create({\n        ...iterator,\n        courseId,\n        courses_offered_arr: subject,\n      });\n    }\n\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      // data,\n      // resultMajor: resultMajor[0].id,\n      data: req.body,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst getCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n    const courseRes = await Course.findByPk(courseId);\n    const majorRes = await Major.findAll({\n      // include: Coursesoffered,\n      where: { courseId },\n    });\n    const typeCourseRes = await TypeCourse.findAll({\n      where: { courseId },\n    });\n\n    let newMajorRes = [];\n    let newTypeCourseRes = [];\n\n    // newMajorRes\n    for (const iterator of majorRes) {\n      const { courses_offered_arr } = iterator;\n      const arrCourses_offereds = JSON.parse(courses_offered_arr);\n      let courses_offereds = [];\n      for (const item of arrCourses_offereds) {\n        const { id } = item;\n        const coursesofferedRes = await Coursesoffered.findByPk(id);\n        courses_offereds.push(coursesofferedRes);\n      }\n      const payload = {\n        ...iterator.dataValues,\n        subject: courses_offereds,\n      };\n      newMajorRes.push(payload);\n    }\n    // newMajorRes\n\n    //newTypeCourseRes\n    for (const iterator of typeCourseRes) {\n      const { courses_offered_arr } = iterator;\n      const arrCourses_offereds = JSON.parse(courses_offered_arr);\n      let courses_offereds = [];\n      for (const item of arrCourses_offereds) {\n        const { id } = item;\n        const coursesofferedRes = await Coursesoffered.findByPk(id);\n        courses_offereds.push(coursesofferedRes);\n      }\n      const payload = {\n        ...iterator.dataValues,\n        subject: courses_offereds,\n      };\n      newTypeCourseRes.push(payload);\n    }\n    //newTypeCourseRes\n\n    if (!courseRes) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    const payload = {\n      courseId,\n      course: {\n        ...courseRes.dataValues,\n      },\n      majors: newMajorRes,\n      typeCourse: newTypeCourseRes,\n    };\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: payload,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst updateCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { majors, typeCourse } = req.body;\n\n    const courseRes = await Course.findByPk(courseId);\n\n    if (!courseRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(courseId: ${courseId}) was not found.`,\n      });\n      return;\n    }\n\n    // majors for\n    for (const iterator of majors) {\n      // const id = iterator.id ? iterator.id : null;\n      const { subject, id } = iterator;\n\n      if (id) {\n        const majorData = await Major.update(\n          { ...iterator, courses_offered_arr: subject, courseId },\n          {\n            where: { id },\n          }\n        );\n      } else {\n        const majorData = await Major.create({\n          ...iterator,\n          courses_offered_arr: subject,\n          courseId,\n        });\n      }\n    }\n\n    // // typeCourse for loop\n    for (const iterator of typeCourse) {\n      const { subject, id } = iterator;\n\n      if (id) {\n        const typeCourseData = await TypeCourse.update(\n          { ...iterator, courses_offered_arr: subject, courseId },\n          {\n            where: { id },\n          }\n        );\n      } else {\n        const typeCourseData = await TypeCourse.create({\n          ...iterator,\n          courses_offered_arr: subject,\n          courseId,\n        });\n      }\n    }\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n\n    // console.log(\"courseRes\", courseRes);\n    // res.send(courseRes);\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst deleteCourseIdForm3 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const courseRes = await Course.findByPk(courseId);\n\n    if (!courseRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (CourseId: ${courseId}) was not found.`,\n      });\n      return;\n    }\n\n    await Major.destroy({\n      where: { courseId },\n    });\n\n    await TypeCourse.destroy({\n      where: { courseId },\n    });\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n  form3,\n  getCourseIdForm3,\n  updateCourseIdForm3,\n  deleteCourseIdForm3,\n};\n"]}