{"version":3,"sources":["../../src/controllers/scholarshipType.controller.js"],"names":["ScholarshipType","db","Scholarship","DocumentScholarshipType","include","create","req","res","body","status","send","response_status","message","data","err","documentScholarships","documentScholarship","scholarshipTypeId","id","findAll","where","ann","dataValues","query","offset","limit","page","Number","order","resultRes","item","result","findOne","params","findByPk","update","console","log","destroy","remove"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEQA,e,GAA0DC,gB,CAA1DD,e;IAAiBE,W,GAAyCD,gB,CAAzCC,W;IAAaC,uB,GAA4BF,gB,CAA5BE,uB;;AACtC,IAAMC,UAAU,CAACF,WAAD,CAAhB;;AAEA,IAAMG;AAAA,sFAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGND,IAAIE,IAHE;AAAA;AAAA;AAAA;;AAITD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJS;;AAAA;AAAA;AAAA,mBAWQZ,gBAAgBK,MAAhB,CAAuBC,IAAIE,IAA3B,CAXR;;AAAA;AAWLK,gBAXK;;AAAA,gBAYNA,IAZM;AAAA;AAAA;AAAA;;AAaTN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAASE,IAAIF,OAAJ,IAAe;AAFjB,aAAT;AAbS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAoBqBN,IAAIE,IAAJ,CAASO,oBApB9B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBFC,+BApBE;;AAqBTA,gCAAoBC,iBAApB,GAAwCJ,KAAKK,EAA7C;AArBS;AAAA,mBAsBHf,wBAAwBE,MAAxB,CAA+BW,mBAA/B,CAtBG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAyBKb,wBAAwBgB,OAAxB,CAAgC;AAC9CC,qBAAO,EAAEH,mBAAmBJ,KAAKK,EAA1B;AADuC,aAAhC,CAzBL;;AAAA;AAyBPG,eAzBO;;AA4BXR,iBAAKS,UAAL,CAAgBP,oBAAhB,GAAuC,EAAvC;AACAF,iBAAKS,UAAL,CAAgBP,oBAAhB,GAAuCM,GAAvC;;AAEAd,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE;AAFmB,aAArB;AA/BW;AAAA;;AAAA;AAAA;AAAA;;AAoCXN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,YAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2CA,IAAMO;AAAA,uFAAU,kBAAOb,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAENgB,iBAFM,GAEIjB,GAFJ,CAENiB,KAFM;AAGNC,kBAHM,GAGkBD,KAHlB,CAGNC,MAHM,EAGEC,KAHF,GAGkBF,KAHlB,CAGEE,KAHF,EAGSC,IAHT,GAGkBH,KAHlB,CAGSG,IAHT;;AAIZ,gBAAIF,UAAUC,KAAV,IAAmBC,IAAvB,EAA6B;AAC3B,qBAAOH,MAAMC,MAAb;AACA,qBAAOD,MAAME,KAAb;AACA,qBAAOF,MAAMG,IAAb;AACAF,uBAASA,SAASG,OAAOH,MAAP,CAAT,GAA0B,IAAnC;AACAC,sBAAQA,QAAQE,OAAOF,KAAP,CAAR,GAAwB,IAAhC;AACA,kBAAIC,IAAJ,EAAU;AACRF,yBAASE,OAAOC,OAAOD,IAAP,CAAP,GAAsB,IAA/B;AACD;AACF;AACKN,iBAdM,GAcEG,QAAQA,KAAR,GAAgB,EAdlB;AAAA;AAAA,mBAeYvB,gBAAgBmB,OAAhB,CAAwB;AAC9CM,0BAD8C;AAE9CD,4BAF8C;AAG9CJ,0BAH8C;AAI9ChB,8BAJ8C;AAK9CwB,qBAAO,CACL,CAAC,WAAD,EAAc,MAAd,CADK,EAEL,CAAC,IAAD,EAAO,MAAP,CAFK;AALuC,aAAxB,CAfZ;;AAAA;AAeNC,qBAfM;;AAAA,iBA0BRA,SA1BQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oDA2BSA,SA3BT;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BCC,gBA3BD;AAAA;AAAA,mBA4BW3B,wBAAwBgB,OAAxB,CAAgC;AACjDC,qBAAO;AACLH,mCAAmBa,KAAKZ;AADnB;AAD0C,aAAhC,CA5BX;;AAAA;AA4BJa,kBA5BI;;AAiCRD,iBAAKR,UAAL,CAAgBP,oBAAhB,GAAuCgB,MAAvC;;AAjCQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,gBAqCPF,SArCO;AAAA;AAAA;AAAA;;AAsCVtB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAASE,IAAIF,OAAJ,IAAe;AAFL,aAArB;AAtCU;;AAAA;AA4CZL,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE,oBAAMgB;AAFa,aAArB;AA5CY;AAAA;;AAAA;AAAA;AAAA;;AAiDZtB,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAjDY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAwDA,IAAMoB;AAAA,uFAAU,kBAAO1B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJW,cAFI,GAEGZ,IAAI2B,MAFP,CAEJf,EAFI;AAAA;AAAA,mBAGOlB,gBAAgBkC,QAAhB,CAAyBhB,EAAzB,EAA6B,EAAEd,gBAAF,EAA7B,CAHP;;AAAA;AAGNS,gBAHM;;AAAA,gBAMPA,IANO;AAAA;AAAA;AAAA;;AAOVN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS;AAFF,aAAT;AAPU;;AAAA;AAAA;AAAA,mBAcIT,wBAAwBgB,OAAxB,CAAgC;AAC9CC,qBAAO,EAAEH,mBAAmBC,EAArB;AADuC,aAAhC,CAdJ;;AAAA;AAcRG,eAdQ;;AAiBZR,iBAAKS,UAAL,CAAgBP,oBAAhB,GAAuC,EAAvC;AACAF,iBAAKS,UAAL,CAAgBP,oBAAhB,GAAuCM,GAAvC;;AAEAd,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPE,oBAAMA;AAFC,aAAT;AApBY;AAAA;;AAAA;AAAA;AAAA;;AAyBZN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAzBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgCA,IAAMuB;AAAA,uFAAS,kBAAO7B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHW,cAFG,GAEIZ,IAAI2B,MAFR,CAEHf,EAFG;AAAA;AAAA,mBAIUlB,gBAAgBmC,MAAhB,CAAuB7B,IAAIE,IAA3B,EAAiC;AACpDY,qBAAO,EAAEF,MAAF;AAD6C,aAAjC,CAJV;;AAAA;AAILa,kBAJK;;;AAQXK,oBAAQC,GAAR,CAAY,QAAZ,EAAsBN,MAAtB;;AARW,kBAUPA,UAAU,CAVH;AAAA;AAAA;AAAA;;AAWTxB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,iCAAiBM,EAAjB;AAFmB,aAArB;AAXS;;AAAA;AAAA;AAAA,mBAkBLf,wBAAwBmC,OAAxB,CAAgC,EAAElB,OAAO,EAAEH,mBAAmBC,EAArB,EAAT,EAAhC,CAlBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAmBqBZ,IAAIE,IAAJ,CAASO,oBAnB9B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBFC,+BAnBE;;AAoBTA,gCAAoBC,iBAApB,GAAwCC,EAAxC;AApBS;AAAA,mBAqBHf,wBAAwBE,MAAxB,CAA+BW,mBAA/B,CArBG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAwBXT,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAxBW;AAAA;;AAAA;AAAA;AAAA;;AA6BXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AA7BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAoCA,IAAM2B;AAAA,uFAAS,kBAAOjC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHW,cAFG,GAEIZ,IAAI2B,MAFR,CAEHf,EAFG;AAAA;AAAA,mBAGUlB,gBAAgBsC,OAAhB,CAAwB;AAC3ClB,qBAAO,EAAEF,MAAF;AADoC,aAAxB,CAHV;;AAAA;AAGLa,kBAHK;;AAAA,kBAOPA,WAAW,CAPJ;AAAA;AAAA;AAAA;;AAQTxB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,qCAAqBM,EAArB;AAFmB,aAArB;AARS;;AAAA;;AAeXX,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAfW;AAAA;;AAAA;AAAA;AAAA;;AAoBXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA2Be;AACbP,gBADa;AAEbc,kBAFa;AAGba,kBAHa;AAIbG,gBAJa;AAKbI;AALa,C","file":"scholarshipType.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { ScholarshipType, Scholarship, DocumentScholarshipType } = db;\nconst include = [Scholarship];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await ScholarshipType.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n\n    for (let documentScholarship of req.body.documentScholarships) {\n      documentScholarship.scholarshipTypeId = data.id;\n      await DocumentScholarshipType.create(documentScholarship);\n    }\n\n    let ann = await DocumentScholarshipType.findAll({\n      where: { scholarshipTypeId: data.id },\n    });\n    data.dataValues.documentScholarships = [];\n    data.dataValues.documentScholarships = ann;\n\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    const where = query ? query : {};\n    const resultRes = await ScholarshipType.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"createdAt\", \"DESC\"],\n        [\"id\", \"DESC\"],\n      ],\n    });\n\n    if (resultRes) {\n      for (const item of resultRes) {\n        let result = await DocumentScholarshipType.findAll({\n          where: {\n            scholarshipTypeId: item.id,\n          },\n        });\n        item.dataValues.documentScholarships = result;\n      }\n    }\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await ScholarshipType.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    let ann = await DocumentScholarshipType.findAll({\n      where: { scholarshipTypeId: id },\n    });\n    data.dataValues.documentScholarships = [];\n    data.dataValues.documentScholarships = ann;\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await ScholarshipType.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    await DocumentScholarshipType.destroy({ where: { scholarshipTypeId: id } });\n    for (let documentScholarship of req.body.documentScholarships) {\n      documentScholarship.scholarshipTypeId = id;\n      await DocumentScholarshipType.create(documentScholarship);\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await ScholarshipType.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}