{"version":3,"sources":["../../src/controllers/subjectMajorNew.controller.js"],"names":["SubjectMajorNew","db","ExpectedLearningOutcomes","include","create","req","res","body","status","send","response_status","message","data","err","findAll","query","offset","limit","page","Number","where","order","resultRes","console","log","findOne","id","params","findByPk","result","subjectMajorNewId","resExpectedLearningOutcomes","dataValues","expectedLearningOutcomes","update","remove","destroy"],"mappings":"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","file":"subjectMajorNew.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { SubjectMajorNew, ExpectedLearningOutcomes } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await SubjectMajorNew.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    const where = query ? query : {};\n    const resultRes = await SubjectMajorNew.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"createdAt\", \"DESC\"],\n        [\"id\", \"DESC\"],\n      ],\n    });\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await SubjectMajorNew.findByPk(id, { include });\n    const resExpectedLearningOutcomes = await ExpectedLearningOutcomes.findAll({\n      where: { subjectMajorNewId: id },\n    });\n    // console.log(\"result\", result);\n\n    if (!result) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    let data = {\n      ...result.dataValues,\n      expectedLearningOutcomes: resExpectedLearningOutcomes,\n    };\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await SubjectMajorNew.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await SubjectMajorNew.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}