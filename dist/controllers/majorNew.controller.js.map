{"version":3,"sources":["../../src/controllers/majorNew.controller.js"],"names":["MajorNew","db","SubjectMajorNew","include","create","req","res","body","status","send","response_status","message","data","subject","majorNewId","dataValues","id","coursesOfferedId","subjectId","err","findAll","majorNews","query","length","where","forEach","key","lang","majorNew","subjectMajorNew","findOne","params","subjectMajor","update","result","console","log","destroy","remove"],"mappings":"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","file":"majorNew.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { MajorNew, SubjectMajorNew } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await MajorNew.create(req.body);\n\n    for (let subject in req.body.subject) {\n      subject.majorNewId = data.dataValues.id\n      subject.coursesOfferedId = subject.subjectId\n      await SubjectMajorNew.create(subject);\n    }\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let majorNews = [];\n    if (Object.keys(req.query).length > 0) {\n      const where = {};\n      Object.keys(req.query).forEach((key) => {\n        if (key === \"lang\") {\n          lang = req.query[key];\n          return;\n        }\n        where[key] = req.query[key];\n      });\n      majorNews = await MajorNew.findAll({\n        // order: [\n        //   [ 'createdAt', 'DESC' ],\n        // ],\n        where,\n        include: ['course']\n      });\n    } else {\n      majorNews = await MajorNew.findAll({\n        // order+: [\n        //   [ 'createdAt', 'DESC' ],\n        // ]\n        include: ['course']\n      });\n\n      \n    }\n\n    //SubjectMajorNew\n    for (const majorNew of majorNews) {\n      let subjectMajorNew = await SubjectMajorNew.findAll({ where: { majorNewId: majorNew.id }, include: ['courses_offered'] });\n      majorNew.dataValues.subject = subjectMajorNew\n    }  \n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: majorNews,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the majorNews.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const id = req.params.id;\n    let majorNew = await MajorNew.findOne({\n      where: { id },\n      include: ['course']\n    });\n    let subjectMajorNew = await SubjectMajorNew.findAll({ where: { majorNewId: id } });\n    for (let subjectMajor of subjectMajorNew) {\n      subjectMajor.dataValues.subjectId = subjectMajor.dataValues.coursesOfferedId\n    }\n    majorNew.dataValues.subject = subjectMajorNew\n    res.send({\n      response_status: \"SUCCESS\",\n      data: majorNew.dataValues,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message:\n        err.message || \"Some error occurred while retrieving the majorNew.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await MajorNew.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    await SubjectMajorNew.destroy({where: {majorNewId: id}})\n\n    for (let subject of req.body.subject) {\n      subject.majorNewId = id\n      subject.coursesOfferedId = subject.subjectId\n      await SubjectMajorNew.create(subject);\n    }\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await MajorNew.destroy({ where: { id } });\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n};\n"]}