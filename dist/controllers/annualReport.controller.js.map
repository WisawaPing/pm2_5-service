{"version":3,"sources":["../../src/controllers/annualReport.controller.js"],"names":["require","Op","AnnualReport","db","AnualReportFile","include","create","req","res","body","status","send","response_status","message","data","documentFiles","documentFile","annualReportId","dataValues","id","err","updateIndex","items","item","index","update","where","result","console","log","findAll","query","offset","limit","page","Number","searchGlobal","or","name_th","like","name_en","order","resultRes","resultRe","findOne","params","findByPk","destroy","remove"],"mappings":"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","file":"annualReport.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { AnnualReport, AnualReportFile } = db;\nconst include = [];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await AnnualReport.create(req.body);\n\n    if (req.body.documentFiles) {\n      for (let documentFile of req.body.documentFiles) {\n        documentFile.annualReportId = data.dataValues.id;\n\n        await AnualReportFile.create(documentFile);\n      }\n    }\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await AnnualReport.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n\n    let where = query ? query : {};\n\n    if (query.searchGlobal) {\n      where = {};\n      where[Op.or] = [\n        {\n          name_th: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n        {\n          name_en: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n      ];\n    }\n\n    const resultRes = await AnnualReport.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"index\", \"ASC\"],\n        [\"createdAt\", \"DESC\"],\n      ],\n    });\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    for (let resultRe of resultRes) {\n      resultRe.dataValues.documentFiles = await AnualReportFile.findAll({\n        where: {\n          annualReportId: resultRe.dataValues.id,\n        },\n      });\n    }\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    let data = await AnnualReport.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    data.dataValues.documentFiles = await AnualReportFile.findAll({\n      where: {\n        annualReportId: data.dataValues.id,\n      },\n    });\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await AnnualReport.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (req.body.documentFiles) {\n      await AnualReportFile.destroy({\n        where: {\n          annualReportId: id,\n        },\n      });\n\n      for (let documentFile of req.body.documentFiles) {\n        documentFile.annualReportId = id;\n\n        await AnualReportFile.create(documentFile);\n      }\n    }\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await AnnualReport.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}