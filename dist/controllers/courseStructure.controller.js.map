{"version":3,"sources":["../../src/controllers/courseStructure.controller.js"],"names":["CourseStructure","db","CourseFormat","Course","include","create","req","res","body","status","send","response_status","message","data","err","form4","courseStructure","courseId","pyaload","map","value","bulkCreate","getform4","params","findByPk","order","resultRes","course_structures","dataValues","newResultRes","dataRes","updateform4","iterator","id","update","where","removeform4","destroy","result","findAll","query","offset","limit","page","Number","newResult","index","length","element","courseStructureId","resultCourseFormat","courseFormat","push","findOne","console","log","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEQA,e,GAA0CC,gB,CAA1CD,e;IAAiBE,Y,GAAyBD,gB,CAAzBC,Y;IAAcC,M,GAAWF,gB,CAAXE,M;;AACvC,IAAMC,UAAU,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,CAAhB;;AAEA,IAAMC;AAAA,sFAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGND,IAAIE,IAHE;AAAA;AAAA;AAAA;;AAITD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJS;;AAAA;AAAA;AAAA,mBAWQZ,gBAAgBK,MAAhB,CAAuBC,IAAIE,IAA3B,CAXR;;AAAA;AAWLK,gBAXK;;AAAA,gBAYNA,IAZM;AAAA;AAAA;AAAA;;AAaTN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAASE,IAAIF,OAAJ,IAAe;AAFjB,aAAT;AAbS;;AAAA;AAmBXL,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE;AAFmB,aAArB;AAnBW;AAAA;;AAAA;AAAA;AAAA;;AAwBXN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,YAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAxBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA+BA,IAAMG;AAAA,uFAAQ,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGLD,IAAIE,IAHC;AAAA;AAAA;AAAA;;AAIRD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJQ;;AAAA;AAAA,wBAW4BN,IAAIE,IAXhC,EAWFQ,eAXE,aAWFA,eAXE,EAWeC,QAXf,aAWeA,QAXf;AAaJC,mBAbI,GAaMF,gBAAgBG,GAAhB,CAAoB,UAACC,KAAD;AAAA,gDAC/BA,KAD+B;AAElCH;AAFkC;AAAA,aAApB,CAbN;;AAkBV;AACA;AACA;AACA;AACA;AACA;;AAvBU;AAAA,mBAyBSjB,gBAAgBqB,UAAhB,CAA2BH,OAA3B,CAzBT;;AAAA;AAyBJL,gBAzBI;;;AA2BVN,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE;AAFmB,aAArB;AA3BU;AAAA;;AAAA;AAAA;AAAA;;AAgCVN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAhCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuCA,IAAMU;AAAA,uFAAW,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAELU,oBAFK,GAEQX,IAAIiB,MAFZ,CAELN,QAFK;;AAIb;;AACMb,oBALO,GAKG,CAACJ,eAAD,CALH;AAMb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAba;AAAA,mBAeWG,OAAOqB,QAAP,CAAgBP,QAAhB,EAA0B;AAChDb,+BADgD;AAEhDqB,qBAAO,CACL,CAAC,WAAD,EAAc,KAAd,CADK,EAEL,CAAC,IAAD,EAAO,KAAP,CAFK;AAFyC,aAA1B,CAfX;;AAAA;AAePC,qBAfO;;AAAA,gBAuBRA,SAvBQ;AAAA;AAAA;AAAA;;AAwBXnB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAASE,IAAIF,OAAJ,IAAe;AAFL,aAArB;AAxBW;;AAAA;AA8BLe,6BA9BK,GA8BiBD,UAAUE,UA9B3B,CA8BLD,iBA9BK;;;AAgCb,mBAAOD,UAAUE,UAAV,CAAqBD,iBAA5B;;AAEME,wBAlCO,GAkCQF,kBAAkBR,GAAlB,CAAsB,UAACC,KAAD;AAAA,gDACtCA,MAAMQ,UADgC;AAAA,aAAtB,CAlCR;AAsCPE,mBAtCO;AAuCXb;AAvCW,eAyCRS,UAAUE,UAzCF;AA0CXZ,+BAAiBa;AA1CN;;;AA6CbtB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE,oBAAMiB;AAFa,aAArB;AA7Ca;AAAA;;AAAA;AAAA;AAAA;;AAkDbvB,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAlDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAyDA,IAAMmB;AAAA,uFAAc,kBAAOzB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGXD,IAAIE,IAHO;AAAA;AAAA;AAAA;;AAIdD,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAAS;AAFU,aAArB;AAJc;;AAAA;AAAA,yBAWsBN,IAAIE,IAX1B,EAWRQ,eAXQ,cAWRA,eAXQ,EAWSC,QAXT,cAWSA,QAXT;AAAA;AAAA;AAAA;AAAA;AAAA,mDAaOD,eAbP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaLgB,oBAbK;AAcNC,cAdM,GAcCD,QAdD,CAcNC,EAdM;;AAAA,iBAgBVA,EAhBU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBOjC,gBAAgBkC,MAAhB,4BAEZF,QAFY;AAGff;AAHe,gBAKjB;AACEkB,qBAAO,EAAEF,MAAF;AADT,aALiB,CAjBP;;AAAA;AAiBNpB,gBAjBM;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA2BOb,gBAAgBK,MAAhB,4BACd2B,QADc;AAEjBf;AAFiB,eA3BP;;AAAA;AA2BNJ,iBA3BM;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAkChBN,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB;AACjB;AAFmB,aAArB;AAlCgB;AAAA;;AAAA;AAAA;AAAA;;AAuChBJ,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAvCgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA8CA,IAAMwB;AAAA,uFAAc,kBAAO9B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERU,oBAFQ,GAEKX,IAAIiB,MAFT,CAERN,QAFQ;AAAA;AAAA,mBAGKjB,gBAAgBqC,OAAhB,CAAwB;AAC3CF,qBAAO,EAAElB,kBAAF;AADoC,aAAxB,CAHL;;AAAA;AAGVqB,kBAHU;;;AAOhB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA/B,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAfgB;AAAA;;AAAA;AAAA;AAAA;;AAoBhBL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BA,IAAM2B;AAAA,uFAAU,kBAAOjC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAENiC,iBAFM,GAEIlC,GAFJ,CAENkC,KAFM;AAGNC,kBAHM,GAGkBD,KAHlB,CAGNC,MAHM,EAGEC,KAHF,GAGkBF,KAHlB,CAGEE,KAHF,EAGSC,IAHT,GAGkBH,KAHlB,CAGSG,IAHT;;AAIZ,gBAAIF,UAAUC,KAAV,IAAmBC,IAAvB,EAA6B;AAC3B,qBAAOH,MAAMC,MAAb;AACA,qBAAOD,MAAME,KAAb;AACA,qBAAOF,MAAMG,IAAb;AACAF,uBAASA,SAASG,OAAOH,MAAP,CAAT,GAA0B,IAAnC;AACAC,sBAAQA,QAAQE,OAAOF,KAAP,CAAR,GAAwB,IAAhC;AACA,kBAAIC,IAAJ,EAAU;AACRF,yBAASE,OAAOC,OAAOD,IAAP,CAAP,GAAsB,IAA/B;AACD;AACF;AACKR,iBAdM,GAcEK,QAAQA,KAAR,GAAgB,EAdlB;AAAA;AAAA,mBAeYxC,gBAAgBuC,OAAhB,CAAwB;AAC9CG,0BAD8C;AAE9CD,4BAF8C;AAG9CN,0BAH8C;AAI9C/B,8BAJ8C;AAK9CqB,qBAAO,CACL,CAAC,WAAD,EAAc,MAAd,CADK,EAEL,CAAC,IAAD,EAAO,MAAP,CAFK;AALuC,aAAxB,CAfZ;;AAAA;AAeNC,qBAfM;;AAAA,gBA0BPA,SA1BO;AAAA;AAAA;AAAA;;AA2BVnB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,uBAASE,IAAIF,OAAJ,IAAe;AAFL,aAArB;AA3BU;;AAAA;AAkCRiC,qBAlCQ,GAkCI,EAlCJ;AAmCRC,iBAnCQ,GAmCA,CAnCA;AAoCPA,iBApCO;;AAAA;AAAA,kBAoCAA,QAAQpB,UAAUqB,MApClB;AAAA;AAAA;AAAA;;AAqCJC,mBArCI,GAqCMtB,UAAUoB,KAAV,CArCN;AAsCJb,cAtCI,GAsCCe,QAAQpB,UAAR,CAAmBK,EAtCpB;AAAA;AAAA,mBAuCuB/B,aAAaqC,OAAb,CAAqB;AACpDJ,qBAAO,EAAEc,mBAAmBhB,EAArB;AAD6C,aAArB,CAvCvB;;AAAA;AAuCJiB,8BAvCI;AA2CNrC,gBA3CM,8BA4CLmC,QAAQpB,UA5CH;AA6CRuB,4BAAcD;AA7CN;;;AAgDVL,sBAAUO,IAAV,CAAevC,IAAf;;AAhDU;AAoC0BiC,mBApC1B;AAAA;AAAA;;AAAA;;AAmDZvC,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,SADE;AAEnBE,oBAAMgC;AAFa,aAArB;AAnDY;AAAA;;AAAA;AAAA;AAAA;;AAwDZtC,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAxDY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA+DA,IAAMyC;AAAA,uFAAU,kBAAO/C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ0B,cAFI,GAEG3B,IAAIiB,MAFP,CAEJU,EAFI;AAAA;AAAA,mBAGOjC,gBAAgBwB,QAAhB,CAAyBS,EAAzB,EAA6B,EAAE7B,gBAAF,EAA7B,CAHP;;AAAA;AAGNS,gBAHM;;AAAA,gBAKPA,IALO;AAAA;AAAA;AAAA;;AAMVN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS;AAFF,aAAT;AANU;;AAAA;;AAaZL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPE;AAFO,aAAT;AAbY;AAAA;;AAAA;AAAA;AAAA;;AAkBZN,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAlBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAyBA,IAAMsB;AAAA,uFAAS,kBAAO5B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH0B,cAFG,GAEI3B,IAAIiB,MAFR,CAEHU,EAFG;AAAA;AAAA,mBAIUjC,gBAAgBkC,MAAhB,CAAuB5B,IAAIE,IAA3B,EAAiC;AACpD2B,qBAAO,EAAEF,MAAF;AAD6C,aAAjC,CAJV;;AAAA;AAILK,kBAJK;;;AAQXgB,oBAAQC,GAAR,CAAY,QAAZ,EAAsBjB,MAAtB;;AARW,kBAUPA,UAAU,CAVH;AAAA;AAAA;AAAA;;AAWT/B,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,iCAAiBqB,EAAjB;AAFmB,aAArB;AAXS;;AAAA;;AAkBX1B,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAlBW;AAAA;;AAAA;AAAA;AAAA;;AAuBXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AAvBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA8BA,IAAM4C;AAAA,uFAAS,kBAAOlD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH0B,cAFG,GAEI3B,IAAIiB,MAFR,CAEHU,EAFG;AAAA;AAAA,mBAGUjC,gBAAgBqC,OAAhB,CAAwB;AAC3CF,qBAAO,EAAEF,MAAF;AADoC,aAAxB,CAHV;;AAAA;AAGLK,kBAHK;;AAAA,kBAOPA,WAAW,CAPJ;AAAA;AAAA;AAAA;;AAQT/B,gBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,+BAAiB,OADE;AAEnBC,qCAAqBqB,EAArB;AAFmB,aAArB;AARS;;AAAA;;AAeX1B,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,SADV;AAEPC,uBAAS;AAFF,aAAT;AAfW;AAAA;;AAAA;AAAA;AAAA;;AAoBXL,gBAAIG,IAAJ,CAAS;AACPC,+BAAiB,OADV;AAEPC,uBAAS,aAAIA,OAAJ,IAAe;AAFjB,aAAT;;AApBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBA2Be;AACbP,gBADa;AAEbkC,kBAFa;AAGbc,kBAHa;AAIbnB,gBAJa;AAKbsB,gBALa;AAMbzC,cANa;AAObO,oBAPa;AAQbS,0BARa;AASbK;AATa,C","file":"courseStructure.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { CourseStructure, CourseFormat, Course } = db;\nconst include = [\"level\", \"facualty\", \"major\"];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const data = await CourseStructure.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst form4 = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { courseStructure, courseId } = req.body;\n\n    const pyaload = courseStructure.map((value) => ({\n      ...value,\n      courseId,\n    }));\n\n    // for (const iterator of courseStructure) {\n    //   const data = await CourseStructure.create({\n    //     ...iterator,\n    //     courseId,\n    //   });\n    // }\n\n    const data = await CourseStructure.bulkCreate(pyaload);\n\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst getform4 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n\n    // const where = { courseId };\n    const include = [CourseStructure];\n    // const resultRes = await CourseStructure.findAll({\n    //   where,\n    //   include,\n    //   order: [\n    //     [\"createdAt\", \"ASC\"],\n    //     [\"id\", \"ASC\"],\n    //   ],\n    // });\n\n    const resultRes = await Course.findByPk(courseId, {\n      include,\n      order: [\n        [\"createdAt\", \"ASC\"],\n        [\"id\", \"ASC\"],\n      ],\n    });\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    const { course_structures } = resultRes.dataValues;\n\n    delete resultRes.dataValues.course_structures;\n\n    const newResultRes = course_structures.map((value) => ({\n      ...value.dataValues,\n    }));\n\n    const dataRes = {\n      courseId,\n      // courseStructure: resultRes,\n      ...resultRes.dataValues,\n      courseStructure: newResultRes,\n    };\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: dataRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst updateform4 = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const { courseStructure, courseId } = req.body;\n\n    for (const iterator of courseStructure) {\n      const { id } = iterator;\n\n      if (id) {\n        const data = await CourseStructure.update(\n          {\n            ...iterator,\n            courseId,\n          },\n          {\n            where: { id },\n          }\n        );\n      } else {\n        const data = await CourseStructure.create({\n          ...iterator,\n          courseId,\n        });\n      }\n    }\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      // data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst removeform4 = async (req, res) => {\n  try {\n    const { courseId } = req.params;\n    const result = await CourseStructure.destroy({\n      where: { courseId },\n    });\n\n    // if (result !== 1) {\n    //   res.status(200).send({\n    //     response_status: \"ERROR\",\n    //     message: `Log (courseId: ${courseId}) was not found.`,\n    //   });\n    //   return;\n    // }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    const where = query ? query : {};\n    const resultRes = await CourseStructure.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"createdAt\", \"DESC\"],\n        [\"id\", \"DESC\"],\n      ],\n    });\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    let newResult = [];\n    let index = 0;\n    for (index; index < resultRes.length; index++) {\n      const element = resultRes[index];\n      const id = element.dataValues.id;\n      const resultCourseFormat = await CourseFormat.findAll({\n        where: { courseStructureId: id },\n      });\n\n      let data = {\n        ...element.dataValues,\n        courseFormat: resultCourseFormat,\n      };\n\n      newResult.push(data);\n    }\n\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: newResult,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await CourseStructure.findByPk(id, { include });\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await CourseStructure.update(req.body, {\n      where: { id },\n    });\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await CourseStructure.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  findOne,\n  update,\n  remove,\n  form4,\n  getform4,\n  updateform4,\n  removeform4,\n};\n"]}