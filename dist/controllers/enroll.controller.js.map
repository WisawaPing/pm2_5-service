{"version":3,"sources":["../../src/controllers/enroll.controller.js"],"names":["require","Op","Enroll","db","ImageEnrollAnnounce","ImageEnrollRegister","include","create","req","res","body","status","send","response_status","message","data","err","console","log","id","imageEnrollAnnounces","imageEnrollAnnounce","enrollId","imageEnrollRegisters","imageEnrollRegister","findAll","where","ann","dataValues","reg","updateIndex","items","item","index","update","result","query","offset","limit","page","Number","searchGlobal","or","name_th","like","name_en","order","resultRes","findOne","params","findByPk","destroy","remove"],"mappings":"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","file":"enroll.controller.js","sourcesContent":["import db from \"~/models\";\n\nconst { Op } = require(\"sequelize\");\n\nconst { Enroll, ImageEnrollAnnounce, ImageEnrollRegister } = db;\nconst include = [\"level\"];\n\nconst create = async (req, res) => {\n  try {\n    // Validate request\n    if (!req.body) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    let data = await Enroll.create(req.body);\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while creating.\",\n      });\n      return;\n    }\n\n    console.log(data.id);\n\n    for (let imageEnrollAnnounce of req.body.imageEnrollAnnounces) {\n      imageEnrollAnnounce.enrollId = data.id;\n      await ImageEnrollAnnounce.create(imageEnrollAnnounce);\n    }\n\n    for (let imageEnrollRegister of req.body.imageEnrollRegisters) {\n      imageEnrollRegister.enrollId = data.id;\n      await ImageEnrollRegister.create(imageEnrollRegister);\n    }\n\n    let ann = await ImageEnrollAnnounce.findAll({\n      where: { enrollId: data.id },\n    });\n    data.dataValues.imageEnrollAnnounces = [];\n    console.log(\"xx\");\n    data.dataValues.imageEnrollAnnounces = ann;\n\n    let reg = await ImageEnrollRegister.findAll({\n      where: { enrollId: data.id },\n    });\n    data.dataValues.imageEnrollRegisters = reg;\n\n    res.status(201).send({\n      response_status: \"SUCCESS\",\n      data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating.\",\n    });\n  }\n};\n\nconst updateIndex = async (req, res) => {\n  try {\n    const items = req.body;\n\n    for (const item of items) {\n      const { id, index } = item;\n\n      const result = await Enroll.update(\n        { index },\n        {\n          where: { id },\n        }\n      );\n\n      console.log(\"result\", result);\n\n      if (result[0] !== 1) {\n        res.status(200).send({\n          response_status: \"ERROR\",\n          message: `(ID: ${id}) was not found.`,\n        });\n        return;\n      }\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let { query } = req;\n    let { offset, limit, page } = query;\n    if (offset || limit || page) {\n      delete query.offset;\n      delete query.limit;\n      delete query.page;\n      offset = offset ? Number(offset) : null;\n      limit = limit ? Number(limit) : null;\n      if (page) {\n        offset = page ? Number(page) : null;\n      }\n    }\n    let where = query ? query : {};\n\n    if (query.searchGlobal) {\n      where = {};\n      where[Op.or] = [\n        {\n          name_th: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n        {\n          name_en: {\n            [Op.like]: `%${query.searchGlobal}%`,\n          },\n        },\n      ];\n    }\n\n    const resultRes = await Enroll.findAll({\n      limit,\n      offset,\n      where,\n      include,\n      order: [\n        [\"index\", \"ASC\"],\n        [\"createdAt\", \"DESC\"],\n      ],\n    });\n\n    if (resultRes) {\n      for (const item of resultRes) {\n        let result = await ImageEnrollAnnounce.findAll({\n          where: {\n            enrollId: item.id,\n          },\n        });\n        item.dataValues.imageEnrollAnnounces = result;\n      }\n    }\n\n    console.log(\"query \", query);\n    // console.log(\"limit \", limit);\n    // console.log(\"offset \", offset);\n\n    if (!resultRes) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: err.message || \"Some error occurred while finding.\",\n      });\n      return;\n    }\n    res.status(200).send({\n      response_status: \"SUCCESS\",\n      data: resultRes,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    let data = await Enroll.findByPk(id, { include });\n    // console.log(\"data\", data);\n\n    if (!data) {\n      res.send({\n        response_status: \"ERROR\",\n        message: \"Some error occurred while finding.\",\n      });\n      return;\n    }\n\n    let ann = await ImageEnrollAnnounce.findAll({ where: { enrollId: id } });\n    data.dataValues.imageEnrollAnnounces = [];\n    console.log(\"xx\");\n    data.dataValues.imageEnrollAnnounces = ann;\n\n    let reg = await ImageEnrollRegister.findAll({ where: { enrollId: id } });\n    data.dataValues.imageEnrollRegisters = reg;\n\n    res.send({\n      response_status: \"SUCCESS\",\n      data: data,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while finding.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await Enroll.update(req.body, {\n      where: { id },\n    });\n    await ImageEnrollAnnounce.destroy({ where: { enrollId: id } });\n    for (let imageEnrollAnnounce of req.body.imageEnrollAnnounces) {\n      imageEnrollAnnounce.enrollId = id;\n      await ImageEnrollAnnounce.create(imageEnrollAnnounce);\n    }\n    await ImageEnrollRegister.destroy({ where: { enrollId: id } });\n    for (let imageEnrollRegister of req.body.imageEnrollRegisters) {\n      imageEnrollRegister.enrollId = id;\n      await ImageEnrollRegister.create(imageEnrollRegister);\n    }\n\n    console.log(\"result\", result);\n\n    if (result != 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Updated successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await Enroll.destroy({\n      where: { id },\n    });\n\n    if (result !== 1) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    res.send({\n      response_status: \"SUCCESS\",\n      message: \"Deleted successfully\",\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting.\",\n    });\n  }\n};\n\nexport default {\n  create,\n  findAll,\n  updateIndex,\n  findOne,\n  update,\n  remove,\n};\n"]}