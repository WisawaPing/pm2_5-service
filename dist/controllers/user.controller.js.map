{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["User","db","include","createToken","payload","secretOrKey","expiresIn","token","jwt","sign","findAll","req","res","users","send","response_status","data","message","create","user","body","username","status","findOne","where","foundUser","resUser","dataValues","error_msg","update","id","params","updateData","findByPk","password","hash","bcrypt","hashSync","result","login","compareSync","match","jwtSecret","response","json","remove","destroy"],"mappings":"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","file":"user.controller.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport db from \"~/models\";\nimport hash from \"~/config/hash\";\n\nconst User = db.User;\n\nimport findAllByQuery from \"../helpers/findAllByQuery\";\n\nconst include = [];\n\nconst createToken = (payload, secretOrKey, expiresIn) => {\n  const token = jwt.sign(payload, secretOrKey, {\n    expiresIn,\n  });\n  return token;\n};\n\nconst findAll = async (req, res) => {\n  try {\n    let users = await findAllByQuery(req, User, include);\n    res.send({\n      response_status: \"SUCCESS\",\n      data: users,\n    });\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while retrieving the users.\",\n    });\n  }\n};\n\nconst create = async (req, res) => {\n  try {\n    const user = req.body;\n\n    const { username } = user;\n\n    // Validate request\n    if (!username) {\n      res.status(200).send({\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const foundUser = await User.findOne({ where: { username } });\n\n    if (!foundUser) {\n      const resUser = await User.create(user);\n      res.send({\n        response_status: \"SUCCESS\",\n        data: resUser.dataValues,\n      });\n    } else {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        error_msg: \"Username นี้ มีผู้ใช้งานแล้ว\",\n      });\n    }\n  } catch (err) {\n    res.status(200).send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while creating the user.\",\n    });\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const { id } = req.params;\n    let updateData = req.body;\n    const data = await User.findByPk(id);\n\n    if (!data) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n      return;\n    }\n\n    let payload = {\n      ...updateData,\n    };\n\n    //   delete payload.password;\n\n    // console.log(\"payload\", payload);\n\n    if (req.body.password) {\n      const hash = bcrypt.hashSync(updateData.password, 10);\n      payload = {\n        ...updateData,\n        password: hash,\n      };\n    }\n\n    const result = await User.update(payload, {\n      where: { id },\n    });\n    if (result == 1) {\n      res.send({\n        response_status: \"SUCCESS\",\n        message: \"Updated successfully\",\n      });\n    } else {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `(ID: ${id}) was not found.`,\n      });\n    }\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while updating.\",\n    });\n  }\n};\n\nconst login = async (req, res) => {\n  const user = req.body;\n  const { username, password } = user;\n  try {\n    // Validate request\n    if (!username) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"Content can not be empty!\",\n      });\n      return;\n    }\n\n    const foundUser = await User.findOne({ where: { username } });\n\n    // console.log(\"foundUser\", foundUser);\n\n    if (foundUser == null) {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"ไม่พบผู้ใช้งานนี้ในระบบ\",\n      });\n      return;\n    }\n\n    const match = await bcrypt.compareSync(password, foundUser.password);\n    if (match) {\n      const { jwtSecret } = hash;\n\n      const { id, username } = foundUser;\n\n      const payload = { id, username };\n\n      const token = createToken(payload, jwtSecret, \"1d\");\n\n      const response = {\n        ...foundUser.dataValues,\n        token,\n      };\n\n      res.send({\n        response_status: \"SUCCESS\",\n        data: response,\n      });\n    } else {\n      //   console.error(\"Password is incorrect\");\n      res.status(200).json({\n        response_status: \"ERROR\",\n        message: \"Password is incorrect\",\n      });\n    }\n  } catch (err) {\n    res.status(200).send({\n      response_status: \"ERROR\",\n      message: err.message || \"ไม่สามารถเชื่อมต่อกับ Server ได้\",\n    });\n  }\n};\n\nconst findOne = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const foundUser = await User.findOne({ include, where: { id } });\n\n    if (foundUser) {\n      res.send({\n        response_status: \"SUCCESS\",\n        data: foundUser.dataValues,\n      });\n    } else {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: \"ไม่พบรหัสผู้ใช้งานนี้ในระบบ\",\n      });\n    }\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"ไม่สามารถเชื่อมต่อกับ Server ได้\",\n    });\n  }\n};\n\nconst remove = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const user = await User.destroy({ where: { id } });\n    if (user == 1) {\n      res.send({\n        response_status: \"SUCCESS\",\n        message: \"User was deleted successfully\",\n      });\n    } else {\n      res.status(200).send({\n        response_status: \"ERROR\",\n        message: `Log (ID: ${id}) was not found.`,\n      });\n      return;\n    }\n  } catch (err) {\n    res.send({\n      response_status: \"ERROR\",\n      message: err.message || \"Some error occurred while deleting the user.\",\n    });\n  }\n};\n\n// const sendOTP = async (req, res) => {\n//   try {\n//     const encodedParams = new URLSearchParams();\n\n//     encodedParams.set(\"key\", \"1696097862238659\");\n//     encodedParams.set(\"secret\", \"7ddb91422ba40ce36195c7514c2667d8\");\n//     encodedParams.set(\"msisdn\", \"0626496993\");\n\n//     const url = \"https://otp.thaibulksms.com/v1/otp/request\";\n\n//     const options = {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/x-www-form-urlencoded\",\n//       },\n//       body: encodedParams,\n//     };\n\n//     fetch(url, options)\n//       .then((res) => {\n//         res.json();\n//         console.log(res);\n//       })\n//       .then((json) => {\n//         console.log(json);\n//       })\n//       .catch((err) => console.error(\"error:\" + err));\n//   } catch (err) {\n//     res.send({\n//       response_status: \"ERROR\",\n//       message: err.message || \"Some error occurred while updating the user.\",\n//     });\n//   }\n// };\n\nexport default {\n  create,\n  findAll,\n  update,\n  login,\n  findOne,\n  remove,\n  // sendOTP,\n};\n"]}