{"version":3,"sources":["../../src/models/user.model.js"],"names":["sequelize","Sequelize","User","define","username","type","STRING","unique","password","TEXT","full_name","user_type","defaultValue","email","comment","status","hooks","beforeCreate","user","options","dataValues","bcrypt","hashSync","beforeUpdate"],"mappings":";;;;;;AAAA;;;;;;kBAEe,UAACA,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,OAAOF,UAAUG,MAAV,CACX,MADW,EAEX;AACEC,cAAU;AACRC,YAAMJ,UAAUK,MAAV,CAAiB,EAAjB,CADE;AAERC,cAAQ;AAFA,KADZ;AAKEC,cAAU;AACRH,YAAMJ,UAAUQ;AADR,KALZ;AAQEC,eAAW;AACTL,YAAMJ,UAAUK,MAAV,CAAiB,EAAjB;AADG,KARb;AAWEK,eAAW;AACTN,YAAMJ,UAAUK,MAAV,EADG;AAETM,oBAAc;AAFL,KAXb;AAeEC,WAAO;AACLR,YAAMJ,UAAUK,MAAV,EADD;AAELQ,eAAS;AAFJ,KAfT;AAmBEC,YAAQ;AACNV,YAAMJ,UAAUK,MAAV,CAAiB,EAAjB,CADA;AAENM,oBAAc;AAFR;AAnBV,GAFW,EA0BX;AACEI,WAAO;AACLC,oBAAc,sBAACC,IAAD,EAAOC,OAAP,EAAmB;AAC/B;AACED,eAAKE,UAAL,CAAgBZ,QAAhB,GACEU,KAAKE,UAAL,CAAgBZ,QAAhB,IAA4BU,KAAKE,UAAL,CAAgBZ,QAAhB,KAA6B,EAAzD,GACIa,iBAAOC,QAAP,CAAgBJ,KAAKE,UAAL,CAAgBZ,QAAhC,EAA0C,EAA1C,CADJ,GAEI,EAHN;AAID;AACF,OARI;AASLe,oBAAc,sBAACL,IAAD,EAAOC,OAAP,EAAmB;AAC/B;AACED,eAAKE,UAAL,CAAgBZ,QAAhB,GACEU,KAAKE,UAAL,CAAgBZ,QAAhB,IAA4BU,KAAKE,UAAL,CAAgBZ,QAAhB,KAA6B,EAAzD,GACIa,iBAAOC,QAAP,CAAgBJ,KAAKE,UAAL,CAAgBZ,QAAhC,EAA0C,EAA1C,CADJ,GAEI,EAHN;AAID;AACF;AAhBI;AADT,GA1BW,CAAb;AA+CA,SAAON,IAAP;AACD,C","file":"user.model.js","sourcesContent":["import bcrypt from \"bcrypt\";\n\nexport default (sequelize, Sequelize) => {\n  const User = sequelize.define(\n    \"user\",\n    {\n      username: {\n        type: Sequelize.STRING(50),\n        unique: true,\n      },\n      password: {\n        type: Sequelize.TEXT,\n      },\n      full_name: {\n        type: Sequelize.STRING(50),\n      },\n      user_type: {\n        type: Sequelize.STRING(),\n        defaultValue: \"USER\",\n      },\n      email: {\n        type: Sequelize.STRING(),\n        comment: \"email\",\n      },\n      status: {\n        type: Sequelize.STRING(30),\n        defaultValue: \"OFFLINE\",\n      },\n    },\n    {\n      hooks: {\n        beforeCreate: (user, options) => {\n          {\n            user.dataValues.password =\n              user.dataValues.password && user.dataValues.password !== \"\"\n                ? bcrypt.hashSync(user.dataValues.password, 10)\n                : \"\";\n          }\n        },\n        beforeUpdate: (user, options) => {\n          {\n            user.dataValues.password =\n              user.dataValues.password && user.dataValues.password !== \"\"\n                ? bcrypt.hashSync(user.dataValues.password, 10)\n                : \"\";\n          }\n        },\n      },\n    }\n  );\n  return User;\n};\n"]}